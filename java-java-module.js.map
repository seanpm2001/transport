{"version":3,"sources":["./src/app/java/abstractions/abstractions.component.ts","./src/app/java/abstractions/abstractions.component.html","./src/app/java/overview/overview.component.ts","./src/app/java/overview/overview.component.html","./src/app/java/importing/importing.component.ts","./src/app/java/importing/importing.component.html","./src/app/java/java.module.ts","./src/app/java/java.component.ts","./src/app/java/java.component.html","./src/app/java/rest/rest.component.ts","./src/app/java/rest/rest.component.html","./src/app/java/logging/logging.component.ts","./src/app/java/logging/logging.component.html","./src/app/java/hello-world/hello-world.component.ts","./src/app/java/hello-world/hello-world.component.html","./src/app/java/java-routing.module.ts","./src/app/java/configuring/configuring.component.ts","./src/app/java/configuring/configuring.component.html","./src/app/java/private-channels/private-channels.component.ts","./src/app/java/private-channels/private-channels.component.html","./src/app/java/transactions/transactions.component.ts","./src/app/java/transactions/transactions.component.html","./src/app/java/building-services/building-services.component.ts","./src/app/java/building-services/building-services.component.html","./src/app/java/messaging/messaging.component.ts","./src/app/java/messaging/messaging.component.html","./src/app/java/initializing/initializing.component.ts","./src/app/java/initializing/initializing.component.html"],"names":[],"mappings":"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","file":"java-java-module.js","sourcesContent":["/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-abstractions',\n  templateUrl: './abstractions.component.html',\n  styleUrls: ['./abstractions.component.scss']\n})\nexport class AbstractionsComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Accessing the bus and features via class Abstractions (Java)</h1>\n\n<p>\n    In the Java version of the Transport, there are currently only two abstractions available. <code class=\"clr-code\">AbstractBase</code>\n    and\n    <code class=\"clr-code\">AbstractService</code> (which extends from <code class=\"clr-code\">AbstractBase</code>)\n</p>\n<p>\n    Extending your classes from these abstractions is pretty important if you want a clean, consistent design in your\n    app.\n</p>\n<hr/>\n\n<h3 id=\"abstractcore\">Using <code class=\"clr-code\">AbstractBase</code> - <span class=\"emphasis\">Base class for bus enabled classes</span>\n</h3>\n\n<p>\n    <code class=\"clr-code\">AbstractBase</code> provides access to the event bus and logging.\n</p>\n\n\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>import com.vmware.transport.core.AbstractBase;\n\n@Component\npublic class MyClass extends AbstractBase &#123;\n    // .. regular Java stuff goes here.\n&#125;</code></pre>\n\n<p>\n    <code class=\"clr-code\">AbstractBase</code> is actually quite basic, You can see the code at:\n    <a href=\"https://github.com/vmware/transport-java/blob/master/java/src/main/com/vmware/transport/core/AbstractBase.java\"\n       target=\"_blank\">\n        https://github.com/vmware/transport-java/blob/master/java/src/main/com/vmware/transport/core/AbstractBase.java\n    </a>\n</p>\n\n<p>\n    There is a single required interface method that you need to implement in order to use <code class=\"clr-code\">AbstractBase</code>.\n    This interface method is\n    <code class=\"clr-code\">initialize()</code>. This is your kick off / boot method, to do what ever you need to.\n</p>\n\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>import com.vmware.transport.core.AbstractBase;\n\n@Component\npublic class MyClass extends AbstractBase &#123;\n    public void initialize() &#123;\n        // .. kick off your stuff here.\n    &#125;\n&#125;</code></pre>\n<hr/>\n\n\n<h3 id=\"abstractservice\">Using <code class=\"clr-code\">AbstractService&lt;ReqT, RespT&gt;</code> - <span\n    class=\"emphasis\">For services</span></h3>\n\n<p>\n    <code class=\"clr-code\">AbstractService</code> allows you to build services that can respond to requests via the\n    distributed bus via Galactic Channels.\n</p>\n\n<p>\n    If you want to build custom services that perform any kind of complex business logic, or call APIs.. and you want to\n    make them available to any UI or CLI that is\n    operating over the fabric, then this is the class for you!\n</p>\n\n<p>\n    The two generic params are the Request type and Response type of what your class is expecting to receive. The\n    request comes from the consumer, the response is\n    what the service returns to the consumer (as the service is the producer).\n</p>\n\n<p>\n    Let's create a sample service called <strong>CalendarService</strong> that simply returns a date or time. This is a\n    very simple example of a service that uses  <code class=\"clr-code\">AbstractService</code>.\n</p>\n\n<h3>Java CalendarService</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>package samples;\n\nimport com.vmware.transport.bridge.Request;\nimport com.vmware.transport.bridge.Response;\nimport com.vmware.transport.bus.model.Message;\nimport com.vmware.transport.core.AbstractService;\nimport org.springframework.stereotype.Component;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\n\n@Component\npublic class CalendarService extends AbstractService&lt;Request&lt;String&gt;, Response&lt;String&gt;&gt; &#123;\n\n    // define the channel the service operates on,.\n    public static final String Channel = \"calendar-service\";\n\n    CalendarService() &#123;\n        super(CalendarService.Channel);\n    &#125;\n\n    // handle service request.\n    protected void handleServiceRequest(Request request, Message busMessage) &#123;\n\n        // which command/request shall we run?\n        switch(request.getRequest()) &#123;\n            case SampleCommand.Date:\n                handleDate(request);\n                break;\n\n            case SampleCommand.Time:\n                handleTime(request);\n                break;\n\n            default:\n                this.handleUnknownRequest(request);\n        &#125;\n    &#125;\n\n    private String formatCalendar(String format) &#123;\n        Calendar calendar = GregorianCalendar.getInstance();\n        SimpleDateFormat fmt = new SimpleDateFormat(format);\n        return fmt.format(calendar.getTime());\n    &#125;\n\n    private void handleTime(Request request) &#123;\n        Response&lt;String&gt; response = new Response&lt;&gt;(request.getId(), formatCalendar(\"hh:mm:ss a\"));\n        this.sendResponse(response, request.getId(), request.getTargetUser());\n    &#125;\n\n    private void handleDate(Request request) &#123;\n        Response&lt;String&gt; response = new Response&lt;&gt;(request.getId(), formatCalendar(\"yyyy-MM-dd\"));\n        this.sendResponse(response, request.getId(), request.getTargetUser());\n    &#125;\n&#125;\n\nabstract class SampleCommand &#123;\n    static final String Time = \"time\";\n    static final String Date = \"date\";\n&#125;</code></pre>\n\n\n<h3>How would I call CalendarService from a UI?</h3>\n\n<p>\n    It's still pretty simple. The Demo component above looks like this:\n</p>\n\n\n<h3>Angular CalendarComponent</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; ChangeDetectorRef, Component, OnDestroy, OnInit &#125; from '@angular/core';\nimport &#123; ClrLoadingState &#125; from '@clr/angular';\nimport &#123; APIResponse, AbstractBase &#125; from '@vmw/transport';\nimport &#123; GeneralUtil &#125; from '@vmw/transport/util/util';\nimport &#123; FabricConnectionState &#125; from '@vmw/transport/fabric.api';\n\n@Component(&#123;\n    selector: 'calendar-service-component',\n    template: `\n        &lt;div class=\"clr-row\" *ngIf=\"connected\"&gt;\n            &lt;div class=\"clr-col-6\"&gt;\n                &lt;button [clrLoading]=\"requestLoading\" class=\"btn btn-primary-outline btn-sm\" (click)=\"requestTime()\"&gt;\n                    Request Time\n                &lt;/button&gt;\n                &lt;button [clrLoading]=\"requestLoading\" class=\"btn btn-primary-outline btn-sm\" (click)=\"requestDate()\"&gt;\n                    Request Date\n                &lt;/button&gt;\n                &lt;button [clrLoading]=\"requestLoading\" class=\"btn btn-primary-outline btn-sm\" (click)=\"unknownCommand()\"&gt;\n                    Send Invalid Command\n                &lt;/button&gt;\n            &lt;/div&gt;\n            &lt;div class=\"clr-col-6\" *ngIf=\"item\"&gt;\n                Fabric Calendar Service Response: &lt;span class=\"emphasis\"&gt;&#123;&#123;item&#125;&#125;&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;`\n&#125;)\nexport class CalendarServiceComponent extends AbstractBase implements OnInit, OnDestroy &#123;\n\n    requestLoading: ClrLoadingState = ClrLoadingState.DEFAULT;\n    public item: string;\n\n    constructor() &#123;\n        super('CalendarServiceComponent');\n    &#125;\n\n    ngOnDestroy() &#123;\n        // stop channel from being extended to fabric.\n        this.bus.markChannelAsLocal('calendar-service');\n    &#125;\n\n    ngOnInit(): void &#123;\n        // extend channel to fabric.\n        this.bus.markChannelAsGalactic('calendar-service');\n    &#125;\n\n    private makeRequest(command: string) &#123;\n        // show state on the button\n        this.requestLoading = ClrLoadingState.LOADING;\n        const request = this.fabric.generateFabricRequest(command);\n\n        this.bus.requestOnceWithId(GeneralUtil.genUUIDShort(), 'calendar-service', request)\n            .handle((response: APIResponse&lt;string&gt;) =&gt; &#123;\n                this.item = response.payload;\n                this.requestLoading = ClrLoadingState.DEFAULT;\n            &#125;);\n    &#125;\n\n    requestTime(): void &#123;\n        this.makeRequest('time');\n    &#125;\n\n    requestDate(): void &#123;\n        this.makeRequest('date');\n    &#125;\n\n    unknownCommand(): void &#123;\n        this.makeRequest('invalid');\n    &#125;\n&#125;\n</code></pre>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport {BaseComponent} from \"@vmw/transport-docs/base.component\";\nimport {TermCommand} from \"@vmw/transport-docs/welcome/welcome.component\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\nimport {javaTerminalCommands} from \"@vmw/transport-docs/shared/model\";\n\n@Component({\n  selector: 'transport-overview',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.scss']\n})\nexport class OverviewComponent extends BaseComponent implements OnInit {\n\n    public javaCommands: Array<TermCommand>;\n    public highlighted = false;\n\n    constructor(private highlightService: HighlightService) {\n        super('OverviewComponent');\n    }\n\n    highlight() {\n        this.highlightService.highlightAll();\n    }\n\n    ngOnInit(): void {\n        this.javaCommands = javaTerminalCommands;\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n\n}\n","<h1>Transport for Java</h1>\n<img src=\"assets/github.png\" alt=\"github\" title=\"transport on github\" class=\"github-logo\"/>\n<a href=\"https://github.com/vmware/transport-java\">View Java source on Github</a>\n<br/>\n<br/>\n<div class=\"alert alert-info\" role=\"alert\">\n    <div class=\"alert-items\">\n        <div class=\"alert-item static\">\n            <div class=\"alert-icon-wrapper\">\n                <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\n            </div>\n            <span class=\"alert-text\">\n                    We're still working on these docs.\n            </span>\n        </div>\n    </div>\n</div>\n\n<p>\n    This implementation is written in Java and depends on the <a href=\"https://spring.io/projects/spring-framework\">Spring Framework</a>, because it's awesome.\n</p>\n\n\n<section *ngFor=\"let cmd of javaCommands; index as i\">\n    <h4 class=\"code-step\">{{cmd.title}}</h4>\n    <transport-animated-console [inputCommand]=\"cmd.command\"\n                                [helperTxt]=\"cmd.notes\"\n                                [consoleTheme]=\"'macOS'\"\n                                [loopAnimation]=\"false\"\n                                [delay]=\"i * 1000\">\n    </transport-animated-console>\n</section>\n\n<hr/>\n<a routerLink=\"/java/importing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Importing Transport</a>\n\n\n\n\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-importing',\n  templateUrl: './importing.component.html',\n  styleUrls: ['./importing.component.scss']\n})\nexport class ImportingComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Importing Transport into your Spring Application</h1>\n\n<p>\n    The Java version of Transport can be consumed via gradle, or maven.\n</p>\n\n<h3>What does the Transport depend on?</h3>\n\n<p>\n    Magic doesn't come for free, so Transport heavily depends on RxJava, Spring, Jackson, Apache Commons and a few others.\n</p>\n\n<hr/>\n\n<h3>Configuring Gradle</h3>\n<p>\n    Add a dependency to the desired Transport jar version and its dependencies.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>dependencies &#123;\n    compile \"com.vmware.transport:vmw-transport:1.0.0\"\n    compile \"org.springframework.boot:spring-boot-starter-web:1.5.18.RELEASE\"\n    compile \"org.springframework.boot:spring-boot-starter-websocket:1.5.18.RELEASE\"\n    compile \"org.springframework.security:spring-security-web:4.2.2.RELEASE\"\n    compile \"org.springframework.security:spring-security-config:4.2.2.RELEASE\"\n    compile \"io.reactivex.rxjava2:rxjava:2.1.9\"\n    compile \"com.fasterxml.jackson.core:jackson-databind:2.9.4\"\n    compile \"com.fasterxml.jackson.module:jackson-module-jsonSchema:2.9.4\"\n    compile \"org.slf4j:slf4j-api:1.7.25\"\n    compile \"ch.qos.logback:logback-classic:1.2.3\"\n    compile \"com.google.code.gson:gson:2.8.1\"\n    compile \"joda-time:joda-time:2.9.9\"\n    compile \"org.apache.httpcomponents:httpclient:4.5.6\"\n    compile \"org.apache.commons:commons-lang3:3.8.1\"\n&#125;</code></pre>\n\n<h3>Configuring Maven</h3>\n\n<p>\n    Next add a dependency to Transport\n</p>\n\n<pre class=\"code\">\n<code class=\"language-markup\" ngNonBindable>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.vmware.transport&lt;/groupId&gt;\n        &lt;artifactId&gt;vmw-transport&lt;/artifactId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;1.5.18.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;\n        &lt;version&gt;1.5.18.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;\n        &lt;version&gt;4.2.2.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;\n        &lt;version&gt;4.2.2.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.reactivex.rxjava2&lt;/groupId&gt;\n        &lt;artifactId&gt;rxjava&lt;/artifactId&gt;\n        &lt;version&gt;2.1.9&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n        &lt;version&gt;2.9.4&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-module-jsonSchema&lt;/artifactId&gt;\n        &lt;version&gt;2.9.4&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j:slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n        &lt;version&gt;1.7.25&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n        &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n        &lt;version&gt;1.2.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;\n        &lt;artifactId&gt;gson&lt;/artifactId&gt;\n        &lt;version&gt;2.8.1&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;joda-time&lt;/groupId&gt;\n        &lt;artifactId&gt;joda-time&lt;/artifactId&gt;\n        &lt;version&gt;2.9.9&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;\n        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;\n        &lt;version&gt;4.5.6&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n        &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n        &lt;version&gt;3.8.1&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n<hr/>\n<a routerLink=\"/java/initializing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Initializing Transport</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {JavaRoutingModule} from './java-routing.module';\nimport {OverviewComponent} from './overview/overview.component';\nimport {JavaComponent} from './java.component';\nimport {SharedModule} from \"@vmw/transport-docs/shared/shared.module\";\nimport {ClarityModule} from \"@clr/angular\";\nimport { ImportingComponent } from './importing/importing.component';\nimport { InitializingComponent } from './initializing/initializing.component';\nimport { HelloWorldComponent } from './hello-world/hello-world.component';\nimport { ConfiguringComponent } from './configuring/configuring.component';\nimport { BuildingServicesComponent } from './building-services/building-services.component';\nimport { PrivateChannelsComponent } from './private-channels/private-channels.component';\nimport { MessagingComponent } from './messaging/messaging.component';\nimport { TransactionsComponent } from './transactions/transactions.component';\nimport { LoggingComponent } from './logging/logging.component';\nimport { RestComponent } from './rest/rest.component';\nimport { AbstractionsComponent } from './abstractions/abstractions.component';\n\n\n@NgModule({\n    declarations: [OverviewComponent, JavaComponent, ImportingComponent, InitializingComponent, HelloWorldComponent, ConfiguringComponent, BuildingServicesComponent, PrivateChannelsComponent, MessagingComponent, TransactionsComponent, LoggingComponent, RestComponent, AbstractionsComponent],\n    imports: [\n        CommonModule,\n        SharedModule,\n        CommonModule,\n        ClarityModule,\n        JavaRoutingModule\n    ]\n})\nexport class JavaModule {\n}\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\n\n@Component({\n  selector: 'transport-java',\n  templateUrl: './java.component.html',\n  styleUrls: ['./java.component.scss']\n})\nexport class JavaComponent implements OnInit {\n\n    @ViewChild(\"mainContent\")\n    private mainContentDiv!: ElementRef<HTMLElement>;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onActivate(_event: any): void {\n        // Scrolling back to the top\n        // Reference: https://stackoverflow.com/questions/48048299/angular-5-scroll-to-top-on-every-route-click/48048822\n        if (this.mainContentDiv) {\n            (this.mainContentDiv.nativeElement as HTMLElement).scrollTop = 0;\n        }\n    }\n}\n","<clr-main-container>\n    <transport-header></transport-header>\n    <div class=\"content-container\">\n        <clr-vertical-nav [clrVerticalNavCollapsible]=\"false\" [clr-nav-level]=\"2\">\n            <a clrVerticalNavLink routerLink=\"./overview\" routerLinkActive=\"active\">\n                Java Overview\n            </a>\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Getting Started\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./importing\" routerLinkActive=\"active\">\n                        Importing Transport\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./configuring\" routerLinkActive=\"active\">\n                        Configuring Spring\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./initializing\" routerLinkActive=\"active\">\n                        Initializing Transport\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./hello-world\" routerLinkActive=\"active\">\n                        Hello World!\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Operations\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./messaging\" routerLinkActive=\"active\">\n                        Messaging Types\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./building-services\" routerLinkActive=\"active\">\n                        Building Services\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./private-channels\" routerLinkActive=\"active\">\n                        Private Channels\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./transactions\" routerLinkActive=\"active\">\n                        Transactions\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./logging\" routerLinkActive=\"active\">\n                        Logging\n                    </a>\n\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n<!--            <clr-vertical-nav-group routerLinkActive=\"active\">-->\n<!--                Extending To Brokers-->\n<!--                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">-->\n<!--                    <a clrVerticalNavLink routerLink=\"./broker-overview\" routerLinkActive=\"active\">-->\n<!--                        Overview-->\n<!--                    </a>-->\n<!--                    <a clrVerticalNavLink routerLink=\"./connecting-broker\" routerLinkActive=\"active\">-->\n<!--                        Connecting to a Broker-->\n<!--                    </a>-->\n<!--                    <a clrVerticalNavLink routerLink=\"./multiple-brokers\" routerLinkActive=\"active\">-->\n<!--                        Connecting Multiple Brokers-->\n<!--                    </a>-->\n<!--                    <a clrVerticalNavLink routerLink=\"./extending-channels\" routerLinkActive=\"active\">-->\n<!--                        Extending Channels-->\n<!--                    </a>-->\n<!--                </clr-vertical-nav-group-children>-->\n<!--            </clr-vertical-nav-group>-->\n\n<!--            <clr-vertical-nav-group routerLinkActive=\"active\">-->\n<!--                Using Stores-->\n<!--                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">-->\n<!--                    <a clrVerticalNavLink routerLink=\"./store-basics\" routerLinkActive=\"active\">-->\n<!--                        Stores: Basics-->\n<!--                    </a>-->\n<!--                    <a clrVerticalNavLink routerLink=\"./store-advanced\" routerLinkActive=\"active\">-->\n<!--                        Stores: Advanced-->\n<!--                    </a>-->\n<!--                </clr-vertical-nav-group-children>-->\n<!--            </clr-vertical-nav-group>-->\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Utilities\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./rest\" routerLinkActive=\"active\">\n                        Calling RESTful APIs\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./abstractions\" routerLinkActive=\"active\">\n                        Built in Abstractions\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n        </clr-vertical-nav>\n        <div class=\"content-area\" id=\"main-content\" #mainContent>\n            <router-outlet (activate)=\"onActivate($event)\"></router-outlet>\n        </div>\n    </div>\n    <transport-footer></transport-footer>\n</clr-main-container>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-rest',\n  templateUrl: './rest.component.html',\n  styleUrls: ['./rest.component.scss']\n})\nexport class RestComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Making RESTful API Requests</h1>\n\n<p>\n    At some point (pretty quickly) you will need to start making remote calls to APIs in order to do interesting things.\n</p>\n<p>\n    Transport provides a built-in service that abstracts the need to be concerned with handling HTTP operations. The Java version of the RestService is a little\n    more advanced than the TypeScript version.\n</p>\n<p>\n    The Java version of <code class=\"clr-code\">RestService</code> knows how to make remote calls to external URIs, as well as knowing how to make calls to local\n    Rest Controllers in your existing application. If the URI is local to your Java application, the RestService will <strong>Look up your Rest Controller using reflection</strong>\n    and ensure it's a match. Once the local controller has been found, the RestService will <strong class=\"emphasis\">call your controller locally</strong>. This means\n    all existing security is also honoured and evaluated, there is also no additional network hop.\n</p>\n<p>\n    The <code class=\"clr-code\">RestService</code> provides operations for <code class=\"clr-code\">GET, PUT, POST,\n    PATCH</code> and <code class=\"clr-code\">DELETE</code> RESTful RPC calls.\n    It can be called from your service when you extend from <code class=\"clr-code\">AbstractService</code>. It can also\n    be called from your class when you extend from\n    <code class=\"clr-code\">AbstractBase</code>.\n</p>\n\n<hr/>\n\n<h3>Loading the RestService</h3>\n\n<p>\n    The RestService is automatically loaded when Transport boots. There is no need to instantiate it manually\n</p>\n<p>\n    In Angular applications, this would be in your <code class=\"clr-code\">main.ts</code> file. Like with Services you build yourself, you would use the\n    <code class=\"clr-code\">ServiceLoader</code> to instantiate and boot the <code class=\"clr-code\">RestService</code> and start it listening for requests.\n</p>\n\n<h3>Calling RestService from a Java Class</h3>\n\n<p>\n    When your service extends from <code class=\"clr-code\">AbstractBase</code> or  <code class=\"clr-code\">AbstractService</code>, a method named <code class=\"clr-code\">restServiceRequest()</code>\n    is provided. There are a couple of overloaded versions of the method, however we will focus on the main one.\n</p>\n\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>/**\n * Used By RestService to convert an incoming request into a RestOperation.\n * @param &lt;Payld&gt; The Request Payload Type (what is being sent)\n * @param &lt;Resp&gt; The Response Payload Type (what we're expecting back)\n */\npublic class RestOperation&lt;Payld, Resp&gt; &#123;\n    @Getter @Setter\n    private UUID id;\n\n    @Getter @Setter\n    private URI uri;\n\n    @Getter @Setter\n    private HttpMethod method;\n\n    @Getter @Setter\n    private Payld body;\n\n    @Getter @Setter\n    private String apiClass;\n\n    @Getter @Setter\n    private Map&lt;String,String&gt; headers;\n\n    @Getter @Setter\n    private String sentFrom;\n\n    @Getter @Setter\n    private Consumer&lt;Resp&gt; successHandler;\n\n    @Getter @Setter\n    private Consumer&lt;RestError&gt; errorHandler;\n&#123;\n\n/**\n * Make a new RestService call.\n *\n * @param operation RestOperation for call Encapsulates individual argument calls.\n * @param &lt;Req&gt;     Type of the payload being sent.\n * @param &lt;Resp&gt;    Type of the response being returned.\n */\nprotected &lt;Req, Resp> void restServiceRequest(RestOperation&lt;Req, Resp&gt; operation);</code></pre>\n\n<hr/>\n\n<p>\n    Let's create a simple service called <code class=\"clr-code\">CloudServicesStatus</code> that calls a remote API via the\n    <code class=\"clr-code\">RestService</code> to check the status of VMware Cloud Services as an example.\n</p>\n\n<h3>Java VMWCloudServicesStatus</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>package samples.rest;\n\nimport com.vmware.transport.bridge.Request;\nimport com.vmware.transport.bridge.Response;\nimport com.vmware.transport.bus.model.Message;\nimport com.vmware.transport.core.AbstractService;\nimport com.vmware.transport.core.error.RestError;\nimport com.vmware.transport.core.model.RestOperation;\nimport com.vmware.transport.core.model.RestServiceResponse;\nimport com.vmware.transport.core.util.ClassMapper;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Component;\n\nimport java.net.URI;\nimport java.util.UUID;\n\n/**\n * Sample service that makes calls to VMW Cloud Services status API.\n */\n@Component\npublic class VMWCloudServiceStatus extends AbstractService&lt;Request&lt;String&gt;, Response&lt;CloudServicesStatusResponse&gt;&gt; &#123;\n\n    VMCCloudServiceStatus() &#123;\n        super(\"services-CloudServiceStatus\");\n    &#125;\n\n    @Override\n    protected void handleServiceRequest(Request&lt;String&gt; request, Message busMessage) throws Exception &#123;\n\n        // there is only a single operation for this service. We can ignore all requests and auto run our\n        // one request handler.\n        this.handleCloudServiceStatusRequest(request);\n    &#125;\n\n    private void handleCloudServiceStatusRequest(Request req) throws Exception &#123;\n\n        // create a rest call for cloud services.\n        super.restServiceRequest(\n                UUID.randomUUID(),\n                new URI(\"https://status.vmware-services.io/api/v2/status.json\"),\n                HttpMethod.GET,\n                null, null,\n                \"samples.rest.CloudServicesStatusResponse\",\n                (Response&lt;CloudServicesStatusResponse&gt; resp) -> &#123;\n                    this.sendResponse(resp, req.getId(), req.getTargetUser());\n                &#125;,\n                (Response&lt;RestError&gt; error) -> &#123;\n                    this.sendError(error, req.getId());\n                &#125;\n        );\n\n    &#125;\n&#125;</code></pre>\n\n\n<h3>👉 No more CORS Issues! 👈</h3>\n\n<p>\n    You can call any API you want now, without having to worry about CORS.\n</p>\n\n<h3>What does the UI Component look like?</h3>\n\n<p>\n    If you have been following along with the TypeScript Examples, this should look pretty familiar now.\n</p>\n\n<h3>Angular CloudServicesApiComponent </h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>import &#123; Component, OnDestroy, OnInit &#125; from '@angular/core';\nimport &#123; ClrLoadingState &#125; from '@clr/angular';\nimport &#123; APIResponse &#125; from '@vmw/transport';\nimport &#123; GeneralUtil &#125; from '@vmw/transport/util/util';\nimport &#123; FabricConnectionState &#125; from '@vmw/transport/fabric.api';\nimport &#123; CloudServicesStatusResponse &#125; from './cloud-services.models';\n\n@Component(&#123;\n    selector: 'cloudapi-service-component',\n    template: `\n        &lt;div *ngIf=\"connected\"&gt;\n            &lt;section&gt;\n                &lt;button [clrLoading]=\"requestLoading\" class=\"btn btn-primary-outline btn-sm\" (click)=\"makeRequest()\"&gt;\n                    Request Cloud Services Status\n                &lt;/button&gt;\n            &lt;/section&gt;\n            &lt;div *ngIf=\"response\"&gt;\n                &lt;table class=\"table left table-verticaltable-compact\"&gt;\n                    &lt;tbody&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Status ID&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.page.id&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Name&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.page.name&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Timezone&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.page.time_zone&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Last Updated&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.page.updated_at&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Fetched From&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.page.url&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Indicator&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.status.indicator&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Service Status&lt;/th&gt;\n                        &lt;td&gt;&#123;&#123;response.status.description&#125;&#125;&lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;strong *ngIf=\"!connected\"&gt;Not connected to fabric, connect to run this code&lt;/strong&gt;`\n&#125;)\nexport class CloudServicesApiComponent extends AbstractBase implements OnInit, OnDestroy &#123;\n\n    public response: CloudServicesStatusResponse;\n    requestLoading: ClrLoadingState = ClrLoadingState.DEFAULT;\n\n    constructor() &#123;\n        super('CloudServicesApiComponent');\n    &#125;\n\n    ngOnDestroy() &#123;\n        // stop channel from being extended to fabric.\n        this.bus.markChannelAsLocal('services-CloudServiceStatus');\n    &#125;\n\n    ngOnInit(): void &#123;\n        // extend channel to fabric.\n        this.bus.markChannelAsGalactic('services-CloudServiceStatus');\n    &#125;\n\n    private makeRequest() &#123;\n        // show state on the button\n        this.requestLoading = ClrLoadingState.LOADING;\n\n        const request = this.fabric.generateFabricRequest('');\n\n        // make request.\n        this.bus.requestOnceWithId(GeneralUtil.genUUIDShort(), 'services-CloudServiceStatus', request)\n            .handle((response: APIResponse&lt;CloudServicesStatusResponse&gt;) =&gt; &#123;\n                this.response = response.payload;\n                this.requestLoading = ClrLoadingState.DEFAULT;\n            &#125;);\n    &#125;\n&#125;\n</code></pre>\n\n<hr/>\n<a routerLink=\"/java/abstractions\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Using Abstractions</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'transport-logging',\n  templateUrl: './logging.component.html',\n  styleUrls: ['./logging.component.scss']\n})\nexport class LoggingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>Logging (Java)</h1>\n<h3>\n    >> Please don't use <code class=\"clr-code\">System.out.println()</code> <<\n</h3>\n<p>\n    When using any of the abstractions provided, they all extend from a single base class called <code class=\"clr-code\">Loggable</code>.\n</p>\n<p>\n    We have created simple helper methods, that provide consistent console output for all levels of logging, however you also\n    have access to <code class=\"clr-code\">log</code> Which allows you to control your own logging if you don't want to use\n    the pre-defined logging methods available.\n</p>\n\n<p>\n    There are a number of logging methods, for each standardized level\n</p>\n\n<hr/>\n\n<ol class=\"list\">\n    <li><code class=\"clr-code\">logInfoMessage(String emoji, String message, String value)</code> - <span class=\"emphasis\"> INFO level message</span></li>\n    <li><code class=\"clr-code\">logErrorMessage(String message, String value)</code> - <span class=\"emphasis\">ERROR level message.</span></li>\n    <li><code class=\"clr-code\">logDebugMessage(String message, String value)</code> - <span class=\"emphasis\">DEBUG level message.</span></li>\n    <li><code class=\"clr-code\">logDebugMessage(String message)</code> - <span class=\"emphasis\">DEBUG level message.</span></li>\n    <li><code class=\"clr-code\">logTraceMessage(String message, String value)</code> - <span class=\"emphasis\">TRACE level message.</span></li>\n    <li><code class=\"clr-code\">logWarnMessage(String message)</code> - <span class=\"emphasis\">WARN level message.</span></li>\n</ol>\n\n<hr/>\n<h3>Using standard logging</h3>\n\n<p>\n    If you don't want to use the methods supplied, for what ever reason - you can access <code class=\"clr-code\">this.log</code> when using\n    <code class=\"clr-code\">AbstractBase</code> as your superclass. When using <code class=\"clr-code\">this.log</code>, you actually\n    have a reference to <code class=\"clr-code\">org.slf4j.Logger</code>.\n</p>\n\n<hr/>\n<a routerLink=\"/java/rest\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Calling RESTFUL APIs</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.scss']\n})\nexport class HelloWorldComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Hello World! (Java)</h1>\n\n<p>To demonstrate the simplest possible use of Transport, we will create a simple class that simply\n    talks to its self.</p>\n\n<h3>Java HelloWorld</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>import com.vmware.transport.bus.model.Message;\nimport com.vmware.transport.core.AbstractBase;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class HelloWorld extends AbstractBase &#123;\n\n    // define a channel.\n    private String myChannel;\n\n    // initialize is the only mandatory method required. This will always run on boot.\n    public void initialize() &#123;\n\n        // create a local channel.\n        myChannel = \"myChannel\";\n\n        // create a responder\n        this.createResponder();\n        this.sendRequest();\n    &#125;\n\n    // send a response to a request.\n    private void createResponder() &#123;\n        this.bus.respondOnce(myChannel,\n                (Message msg) -> msg.getPayload().toString() + \" world\"\n        );\n    &#125;\n\n    // send a request\n    private void sendRequest() &#123;\n        this.bus.requestOnce(myChannel, \"hello\",\n                (Message msg) -> &#123;\n                    this.logInfoMessage(\"HelloWorld:\", \"Got a response! \", msg.getPayload().toString());\n                &#125;\n        );\n    &#125;\n&#125;</code></pre>\n\n<p>The output of the component is pretty basic. If you look at your console, you will see something like this</p>\n\n<pre class=\"log-output\">2021-03-20 22:19:37.229 <span class=\"console-green\">DEBUG</span> <span class=\"console-pink\">1526</span> --- [main] <span class=\"console-blue\">com.vmware.transport.bus.EventBusImpl</span>      : 🔹  <span class=\"console-grey\">Initializing Transport Service: HelloWorld</span>\n2021-03-20 22:19:37.248 <span class=\"console-green\">INFO</span>  <span class=\"console-pink\">1526</span> --- [main] <span class=\"console-blue\">samples.HelloWorld</span>                         : <span class=\"console-grey\">HelloWorld:  Got a response!:</span> <strong class=\"console-pink\">hello world</strong>\n</pre>\n\n<hr/>\n\n<h3>Breakdown of what is happening</h3>\n\n<p>\n    The first requirement is to annotate your class with the <code class=\"clr-code\">@Component</code> annotation provided by Spring. This marks your class as a\n    Spring Bean, meaning it will be picked up and loaded automatically.\n</p>\n\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>@Component\npublic class HelloWorld extends AbstractBase &#123;\n    // ...\n&#125;\n</code></pre>\n\n<p>\n    The next step is to ensure your class extends from <code class=\"clr-code\">AbstractBase</code>. This is the same as the TypeScript version, however the\n    Java version is mandatory, where the TypeScript version is optional.\n</p>\n<p>\n    When you extend from <code class=\"clr-code\">AbstractBase</code>. You're also implementing the <code class=\"clr-code\">TransportEnabled</code> interface, which has\n    a single method you need to implement. <code class=\"clr-code\">initialize()</code>\n</p>\n\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>@Component\npublic class HelloWorld extends AbstractBase &#123;\n    public initialize() &#123;\n        // ...\n    &#125;\n&#125;\n</code></pre>\n\n<p>\n    <code class=\"clr-code\">initialize()</code> is your start point. You can use a Constructor, however you may not have access to the event bus at that point. It's\n    <strong class=\"emphasis\">Highly Recommended</strong> that you kick off anything you want to run from this method and <strong class=\"emphasis\">Not the constructor.</strong>\n</p>\n\n<p>\n    The rest of the example simply sets up a responder and sends a request on the <code class=\"clr-code\">myChannel</code> channel. The API is similar to the\n    TypeScript API, with a few small differences. There is no <code class=\"clr-code\">handle()</code> method. You simply pass in your lambdas as and argument.\n</p>\n<hr/>\n\n<h3>Why is the API slightly different to TypeScript?</h3>\n\n<p>\n    Java and TypeScript are completely different languages that operate in very different ways. TypeScript isn't executed, it's transpiled to JavaScript.\n    All languages are different and bring their own designs, we have tried to keep the APIs as close as possible where it makes sense. We have used language specific\n    techniques and designs in some places however.\n</p>\n\n<hr/>\n<a routerLink=\"/java/messaging\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Messaging Types</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {JavaComponent} from \"@vmw/transport-docs/java/java.component\";\nimport {OverviewComponent} from \"@vmw/transport-docs/java/overview/overview.component\";\nimport {ImportingComponent} from \"@vmw/transport-docs/java/importing/importing.component\";\nimport {InitializingComponent} from \"@vmw/transport-docs/java/initializing/initializing.component\";\nimport {HelloWorldComponent} from \"@vmw/transport-docs/java/hello-world/hello-world.component\";\nimport {ConfiguringComponent} from \"@vmw/transport-docs/java/configuring/configuring.component\";\nimport {BuildingServicesComponent} from \"@vmw/transport-docs/java/building-services/building-services.component\";\nimport {MessagingComponent} from \"@vmw/transport-docs/java/messaging/messaging.component\";\nimport {PrivateChannelsComponent} from \"@vmw/transport-docs/java/private-channels/private-channels.component\";\nimport {TransactionsComponent} from \"@vmw/transport-docs/java/transactions/transactions.component\";\nimport {LoggingComponent} from \"@vmw/transport-docs/java/logging/logging.component\";\nimport {RestComponent} from \"@vmw/transport-docs/java/rest/rest.component\";\nimport {AbstractionsComponent} from \"@vmw/transport-docs/java/abstractions/abstractions.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: JavaComponent,\n        children: [\n            {path: '', component: OverviewComponent},\n            {path: 'overview', component: OverviewComponent},\n            {path: 'importing', component: ImportingComponent},\n            {path: 'configuring', component: ConfiguringComponent},\n            {path: 'initializing', component: InitializingComponent},\n            {path: 'hello-world', component: HelloWorldComponent},\n            {path: 'building-services', component: BuildingServicesComponent},\n            {path: 'messaging', component: MessagingComponent},\n            {path: 'private-channels', component: PrivateChannelsComponent},\n            {path: 'transactions', component: TransactionsComponent},\n            {path: 'logging', component: LoggingComponent},\n            {path: 'rest', component: RestComponent},\n            {path: 'abstractions', component: AbstractionsComponent},\n        ]\n    }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class JavaRoutingModule { }\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-configuring',\n  templateUrl: './configuring.component.html',\n  styleUrls: ['./configuring.component.scss']\n})\nexport class ConfiguringComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>\n    Configuring your Spring Application\n</h1>\n\n<p>\n   Transport makes use of Spring's magic under the covers, in a significant way. This has advantages and disadvantages. It's good because\n    we don't have to re-invent the wheel. It's bad because it means the Java version of Transport is dependent on Spring to operate.\n</p>\n<hr/>\n\n<h3>\n    The Transport Config Class.\n</h3>\n\n<p>\n    We use the <code class=\"clr-code\">@Configuration</code> annotation provided by Spring to set things up. We also then use the\n    built in STOMP, Messaging, Broker and WebSocket support.\n</p>\n\n<p>\n    When creating your configuration class, you need to implement the <code class=\"clr-code\">TransportBridgeConfigurer</code>.\n    This interface allows you to define which endpoints your want your application to expose. This will default to '/fabric'.\n</p>\n<p>\n    To enable Transport functionality for automatic local and remote broker integration, you need the <code class=\"clr-code\">@EnableTransport</code> annotation also.\n    You can use the bus internally without this, but you won't get the benefits of connecting the bus to a broker.\n</p>\n<hr/>\n<h3>\n    What is an endpoint?\n</h3>\n\n<p>\n    An endpoint is the destination you want to expose the STOMP pub-sub interface used by the TypeScript client, or any STOMP compatible client. The choice is up to you, however\n    for consistency across applications, we recommend the default '/fabric' endpoint.\n</p>\n<hr/>\n<p>\n    Inside your configuration, you can configure the endpoints, the allows origins (defaults to all), local broker (/topic) definitions and\n    the publication prefix (/pub)\n</p>\n<p>\n    The publication prefix is where messages are pushed into the local broker. You should not directly push to /topic, because you will\n    receive an echo back yourself. The publication prefix ensures all subscribers get your message, but you don't get a copy back yourself if you're\n    also subscribed to a destination.\n</p>\n\n<p>\n    Here is an example of a Configuration that uses all the defaults. There isn't a need to change any of this, unless you have specific needs or conflicts.\n</p>\n\n<h3>MyAppFabricConfiguration</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>package com.vmware.skyscraper.configs;\n\nimport com.vmware.transport.bridge.spring.config.TransportBridgeConfiguration;\nimport com.vmware.transport.bridge.spring.config.TransportBridgeConfigurer;\nimport com.vmware.transport.bridge.spring.config.annotation.EnableTransport;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n\n/**\n * Transport Configuration.\n */\n@Configuration\n@EnableTransport\n@EnableWebSocketMessageBroker\npublic class MyConfiguration extends AbstractWebSocketMessageBrokerConfigurer\n        implements TransportBridgeConfigurer &#123;\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) &#123;\n        config.enableSimpleBroker(\"/topic\");\n        config.setApplicationDestinationPrefixes(\"/pub\");\n    &#125;\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) &#123;\n        registry.addEndpoint(\"/fabric\").setAllowedOrigins(\"*\");\n    }\n\n    @Override\n    public void registerTransportDestinationPrefixes(TransportBridgeConfiguration configuration) &#123;\n        configuration.addTransportDestinationPrefixes(\"/topic\", \"/pub\");\n    }\n}\n</code></pre>\n\n<h4 class=\"emphasis\">\n    And you're done!\n</h4>\n\n<hr/>\n<h3>\n    How do I know I am done?\n</h3>\n\n<p>When you boot you application, you will see something like the following in your console.</p>\n\n<pre class=\"log-output\">2019-03-01 14:34:42.968  <span class=\"console-green\">INFO</span>  <span class=\"console-pink\">50737</span>  --- [main] <span class=\"console-blue\">o.s.w.s.s.s.WebSocketHandlerMapping</span>         : <span class=\"console-white\">Mapped URL path [/transport] onto handler of type [class org.springframework.web.socket.server.support.WebSocketHttpRequestHandler]</span>\n2021-03-20 14:34:42.969  <span class=\"console-green\">INFO</span>  <span class=\"console-pink\">50737</span>  --- [main] <span class=\"console-blue\">o.s.w.s.s.s.WebSocketHandlerMapping</span>         : <span class=\"console-white\">Mapped URL path [/fabric] onto handler of type [class org.springframework.web.socket.server.support.WebSocketHttpRequestHandler]</span>\n2021-03-20 14:34:43.154  <span class=\"console-green\">INFO</span>  <span class=\"console-pink\">50737</span>  --- [main] <span class=\"console-blue\">.WebSocketAnnotationMethodMessageHandler</span>    : <span class=\"console-white\">Mapped \"&#123;[/&#123;topicDestination&#125;],messageType=[MESSAGE]&#125;\" onto public void com.vmware.transport.bridge.spring.controllers.MessageController.bridgeMessage(com.vmware.transport.bridge.Request,java.lang.String) throws com.vmware.transport.bridge.RequestException</span>\n2021-03-20 14:34:43.887  <span class=\"console-green\">INFO</span>  <span class=\"console-pink\">50737</span>  --- [main] <span class=\"console-blue\">com.vmware.transport.bus.EventBusImpl</span>       : 🌈  <strong class=\"console-pink\">Starting Transport</strong>\n2021-03-20 14:34:43.912  <span class=\"console-green\">DEBUG</span> <span class=\"console-pink\">50737</span>  --- [main] <span class=\"console-blue\">com.vmware.transport.bus.EventBusImpl</span>       : 🔹  <span class=\"console-grey\">Initializing Transport Service: RestService</span>\n2021-03-20 14:34:43.912  <span class=\"console-green\">INFO</span>  <span class=\"console-pink\">50737</span>  --- [main] <span class=\"console-blue\">c.v.transport.core.operations.RestService</span>   : 📣  <span class=\"console-white\">RestService initialized, handling requests on channel: <strong class=\"console-pink\">transport-services::REST</strong></span></pre>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-private-channels',\n  templateUrl: './private-channels.component.html',\n  styleUrls: ['./private-channels.component.scss']\n})\nexport class PrivateChannelsComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Using Private Channels</h1>\n<p>\n    The three ways to conduct direct messaging, as discussed in <a routerLink=\"/java/messaging\">Messaging Types</a>,\n    have one caveat; it uses a single WebSocket endpoint for both broadcast and direct messaging. The filtering mechanism is\n    implemented on the client side.\n    What this implies is that while the UI will not be able to see and process the response meant for another client's request\n    with a different request ID, under the hood you can still see the message packet arriving at your browser using inspection tools.\n    This could pose a security problem and might not be a feasible solution.\n</p>\n<p>\n    With Transport, you can now set up 1:1 private channels between the broker and clients\n    which ensures all communication between a client and the broker will always happen on a dedicated channel and other clients\n    will not be able to see the message at all.\n</p>\n<p>\n    See the following steps to configure and send to and receive from a private channel.\n</p>\n<hr>\n<h3>\n    Configure Spring Boot to add a broker endpoint for private channels\n</h3>\n<p>\n    Take MyConfiguration from <a routerLink=\"/java/configuring\">Configuring Spring</a> as the starting\n    point.  Here we want to 1) add a new endpoint <code class=\"clr-code\">/queue</code> as the main endpoint for\n    private conversations, and 2) configure a default handshake handler for the STOMP session.\n    The handshake handler is responsible for generating and assigning a unique ID to each session.\n</p>\n<h3>MyConfiguration</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>// ...\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) &#123;\n        config.enableSimpleBroker(\"/topic\", \"/queue\", \"/pub\");\n        config.setApplicationDestinationPrefixes(\"/pub\");\n    }\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) &#123;\n        registry.addEndpoint(\"/fabric\")\n                .setAllowedOrigins(\"*\")\n                .setHandshakeHandler(new DefaultHandshakeHandler() &#123;\n                    @Override\n                    protected Principal determineUser(ServerHttpRequest request,\n                                                      WebSocketHandler wsHandler,\n                                                      Map&lt;String, Object>&gt; attributes) &#123;\n                        return new SessionPrincipal(UUID.randomUUID().toString());\n                    }\n                });\n    }\n\n    @Override\n    public void registerTransportDestinationPrefixes(TransportBridgeConfiguration configuration) &#123;\n        configuration.addTransportDestinationPrefixes(\"/topic\", \"/pub\", \"/user/queue\");\n    }\n// ...\n</code></pre>\n<h3>Principal implementation example</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>public class SessionPrincipal implements Principal &#123;\n    private String name;\n\n    public SessionPrincipal(String name) &#123;\n        this.name = name;\n    }\n\n    @Override\n    public String getName() &#123;\n        return name;\n    }\n\n    public void setName(String name) &#123;\n        this.name = name;\n    }\n}\n</code></pre>\n<hr>\n<h3>\n    Then modify your service's <code class=\"clr-code\">sendResponse()</code> and <code class=\"clr-code\">sendError()</code>\n</h3>\n<p>\n    See how <code class=\"clr-code\">sendResponse()</code> in <code class=\"clr-code\">PongService</code> of the\n    <a routerLink=\"/java/building-services\">Building Services</a> section accepts three arguments.\n    The last argument describes the destination's session identifier so that the message or error message,\n    in the case of <code class=\"clr-code\">sendError()</code>, will reach its intended audience.\n</p>\n<hr>\n<h3>\n    And finally, mark the channel as private from the UI\n</h3>\n<p>\n    <code class=\"clr-code\">markChannelAsGalactic()</code> method accepts a channel name as the first required argument,\n    and whether it's a private channel as the second, optional boolean value. By default it is set to false, meaning\n    if you marked your channel without explicitly specifying that it should be a private channel, it would be a\n    broadcast channel. See <a routerLink=\"/ts/extending-channels\">Extending channels</a>\n    as a reference. If you wanted to turn the servbot channel private, you would need to simply turn the following:\n</p>\n<pre class=\"code\"><code class=\"language-ts\" ngNonBindable>this.bus.markChannelAsGalactic('sergeant-fox');</code></pre>\n<p>\n    into this:\n</p>\n<pre class=\"code\"><code class=\"language-ts\" ngNonBindable>this.bus.markChannelAsGalactic('sergeant-fox', true);</code></pre>\n<p>\n    Try out the sample in multiple browser tabs and notice using your browser's inspect tools how each response is\n    delivered only to the client that made the request.\n</p>\n<hr/>\n<a routerLink=\"/java/transactions\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Transactions</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-transactions',\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.scss']\n})\nexport class TransactionsComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Using Transactions.</h1>\n<p>\n    A technique that can be used to encapsulate a conversation between a component and a service, or between\n    services themselves - is to use a transaction.\n</p>\n<p>\n    Transactions via Transport are not traditional transactions, in the sense that they can be rolled back if they fail, instead they are defined as a\n    group of requests and responses that have to occur before the transaction can be considered complete.\n</p>\n<p>\n    For example, if you need to call a number of services to get a number of responses, in order to be able to construct\n    a response for a component - this would be a transactions.\n\n</p>\n<p>\n    Similarly if you need to make a number of calls to services and wait for stores to be available and populated, this would also be a\n    transaction. Transactions can be either synchronous, or asynchronous.\n</p>\n<p>\n    Transactions are asynchronous by default. Essentially when you commit transactions, all the requests will be fired\n    at once, the transaction will complete once responses to all those requests have been\n    completed. These responses can arrive in any order and at any time (hence the asynchronous nature).\n</p>\n<p>\n    However there may be times when you want your logic to run in a synchronous manner\n    (due to your API design for example). When running a synchronous transaction, each request in the transaction will\n    only fire once the previous one has completed. This is obviously a lot slower,\n    but may be required based on your needs.\n</p>\n\n<hr/>\n<h3>\n    How do I create / start a transaction?\n</h3>\n\n<p>\n    <code class=\"clr-code\">this.bus.createTransaction()</code> is the simplest way to create any transaction. You will be returned a <code class=\"clr-code\">Transaction</code>\n    object, which allows you to track progress of the transaction and more.\n</p>\n\n<h3>\n    What types of transactions are there available?\n</h3>\n\n<p>\n    There are two types of transactions available.\n</p>\n<ol class=\"list\">\n    <li><code class=\"clr-code\">Asynchronous</code> - <span class=\"emphasis\">All requests fired at once, no way to determine which response comes back in which order.</span></li>\n    <li><code class=\"clr-code\">Synchronous</code> - <span class=\"emphasis\">Each request is fired only after the previous request has returned.</span></li>\n</ol>\n\n<p>\n    If don't care about which order your responses come back in, then <code class=\"clr-code\">Asynchronous</code> is what you're looking for. If you need all your\n    responses to be returned in sequence, ensuring a stepped one-at-a-time process, then <code class=\"clr-code\">Synchronous</code> is what you need. <code class=\"clr-code\">Asynchronous</code> transactions are <strong class=\"emphasis\">MUCH FASTER</strong>\n</p>\n\n\n<h3>\n    What happens if something goes wrong mid-transaction?\n</h3>\n\n<p>\n    Like with every other fabric concept, we have built success and error handlers for every operation. If a service errors out during the transaction,\n    then the error handler you supply via <code class=\"clr-code\">transaction.onError()</code> will be triggered. You will receive the error that occurred. The remainder\n    of the transaction will be stopped.\n</p>\n\n<hr/>\n\n<p>\n    Below is an example of a Java Consumer that calls <code class=\"clr-code\">PongService</code> and <code class=\"clr-code\">CalendarService</code> via an\n    asynchronous transaction\n</p>\n\n<h3>Java PongCalendarServiceConsumer</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>package samples.pong;\n\nimport com.vmware.transport.bridge.Request;\nimport com.vmware.transport.bridge.Response;\nimport com.vmware.transport.bus.Transaction;\nimport com.vmware.transport.bus.model.Message;\nimport com.vmware.transport.core.AbstractBase;\nimport com.vmware.transport.core.util.ClassMapper;\nimport org.springframework.stereotype.Component;\nimport samples.calendar.CalendarService;\n\nimport java.util.UUID;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class PongCalendarServiceConsumer extends AbstractBase &#123;\n\n    private ScheduledExecutorService executorService;\n\n    PongCalendarServiceConsumer() &#123; this.executorService = Executors.newScheduledThreadPool(5); &#125;\n\n    /**\n     * Call PongService and Calendar Service as a part of a transaction\n     */\n    @Override\n    public void initialize() &#123;\n        // create task, wait 1 second before executing.\n        Runnable runTransactionTask = () -&gt; this.runTransaction();\n        executorService.schedule(runTransactionTask, 1000,  TimeUnit.MILLISECONDS);\n    &#125;\n\n    private void runTransaction() &#123;\n        // create async transaction\n        UUID transactionId = UUID.randomUUID();\n        Transaction transaction = bus.createTransaction(Transaction.TransactionType.ASYNC, transactionId);\n\n        // send request to PongService\n        transaction.sendRequest(\n                PongService.Channel,\n                new Request&lt;String&gt;(transactionId, \"Basic\") // request basic pong\n        );\n\n        // send request to CalendarService\n        transaction.sendRequest(\n                CalendarService.Channel,\n                new Request&lt;String&gt;(transactionId, \"time\") // request time\n        );\n\n        // when transaction is done\n        transaction.onComplete(\n                (Message[] responses) -&gt; &#123;\n\n                    // concatenate service responses into a string.\n                    StringBuilder serviceResponses = new StringBuilder();\n                    for(Message msg: responses) &#123;\n\n                        String serviceResponse = ClassMapper.CastPayload(String.class, (Response)msg.getPayload());\n                        serviceResponses.append(\"&gt; \" + serviceResponse + \" \"); // add each response together.\n                    &#125;\n\n                    // log output.\n                    this.logInfoMessage(\"PongCalendarServiceConsumer:\", \"Response\", serviceResponses.toString());\n                &#125;\n        );\n\n        // commit transaction.\n        transaction.commit();\n    &#125;\n&#125;</code></pre>\n\n<hr/>\n\n<h3>\n    What is happening in this example?\n</h3>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>...\n@Component\npublic class PongCalendarServiceConsumer extends AbstractBase &#123;\n\n    private ScheduledExecutorService executorService;\n\n    PongCalendarServiceConsumer() &#123; this.executorService = Executors.newScheduledThreadPool(5); &#125;\n\n    /**\n     * Call PongService and Calendar Service as a part of a transaction\n     */\n    @Override\n    public void initialize() &#123;\n        // create task, wait 1 second before executing.\n        Runnable runTransactionTask = () -&gt; this.runTransaction();\n        executorService.schedule(runTransactionTask, 1000,  TimeUnit.MILLISECONDS);\n    &#125;\n\n...</code></pre>\n\n<p>The first thing this example does is create a new scheduled Java Executor, this is so we can push a Runnable lambda that performs\n    a unit of work, after a certain delay. We do this because this is a working demo, we have to ensure every other service is up before we\n    can start calling them.</p>\n\n<p>\n    One thing we're also doing here is ensuring that all service requests in a transaction, use the same ID for each message\n    going across each channel. You can see this in action when we create a <code class=\"clr-code\">UUID</code> that is fed\n    into the transaction, and each request going out.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>...\nprivate void runTransaction() &#123;\n    // create async transaction\n    UUID transactionId = UUID.randomUUID();\n    Transaction transaction = bus.createTransaction(Transaction.TransactionType.ASYNC, transactionId);\n...</code></pre>\n\n<p>\n    In this next step, we created a new <code class=\"clr-code\">Transaction</code> that is <code class=\"clr-code\">ASYNC</code>. This means\n    our transaction will fire every request at the same time and collect responses in any order they arrive.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>...\n// send request to PongService\ntransaction.sendRequest(\n    PongService.Channel,\n    new Request&lt;String&gt;(transactionId, \"Basic\") // request basic pong\n);\n\n// send request to CalendarService\ntransaction.sendRequest(\n        CalendarService.Channel,\n        new Request&lt;String&gt;(transactionId, \"time\") // request time\n);\n...</code></pre>\n\n<p> In the above step, we actually queue up requests to be sent out as a part of the transaction. In this case, there are two requests, once is for t\n    the <code class=\"clr-code\">CalendarService</code> and the other is for the <code class=\"clr-code\">PongService</code></p>.\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>...\n// when transaction is done\ntransaction.onComplete(\n    (Message[] responses) -&gt; &#123;\n\n        // concatenate service responses into a string.\n        StringBuilder serviceResponses = new StringBuilder();\n        for(Message msg: responses) &#123;\n\n            String serviceResponse = ClassMapper.CastPayload(String.class, (Response)msg.getPayload());\n            serviceResponses.append(\"&gt; \" + serviceResponse + \" \"); // add each response together.\n        &#125;\n\n        // log output.\n        this.logInfoMessage(\"PongCalendarServiceConsumer:\", \"Response\", serviceResponses.toString());\n    &#125;\n);\n...</code></pre>\n\n<p>\n    In the above sample, we're defining our success handler for a successfully completed transaction. Your success handler\n    will simply be passed an array of <code class=\"clr-code\">Message</code> objects. YOu can then do what you need to with these\n    objects, they will be in a random order if the transaction is async, otherwise they will be in the same order your requests were\n    queued up in.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>...\n // commit transaction.\ntransaction.commit();\n...</code></pre>\n\n<p>\n    The last step is to commit the transaction, this essentially fires everything off. Nothing happens until you commit the transaction. The\n    <code class=\"clr-code\">commit()</code> method returns immediately and the transaction begins.\n</p>\n<hr/>\n<a routerLink=\"/java/logging\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Logging</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-building-services',\n  templateUrl: './building-services.component.html',\n  styleUrls: ['./building-services.component.scss']\n})\nexport class BuildingServicesComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n\n","\n<h1>Building Services</h1>\n\n<p>\n    To get started, we should create a new class called <code class=\"clr-code\">PongService</code>.\n</p>\n<p>\n    The first thing we need to do in order to create our first simple <code class=\"clr-code\">PongService</code> is\n    create a <code class=\"clr-code\">PongServiceRequest</code> model and a\n    <code class=\"clr-code\">PongServiceResponse</code> model. These two models are responsible for allowing other actors\n    to know what to send to our service, and what to expect in response.\n</p>\n\n<h3>Java PongService</h3>\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>\nimport com.vmware.transport.bridge.Request;\nimport com.vmware.transport.bridge.Response;\nimport com.vmware.transport.bus.Transaction;\nimport com.vmware.transport.bus.model.Message;\nimport com.vmware.transport.core.AbstractService;\nimport com.vmware.transport.core.util.ClassMapper;\nimport org.springframework.stereotype.Component;\nimport samples.CalendarService;\n\nimport java.util.UUID;\n\n@Component\npublic class PongService extends AbstractService&lt;Request&lt;String&gt;, Response&lt;String&gt;&gt; &#123;\n    // define the channel the service operates on\n\n    public static final String Channel = \"services-PongService\";\n\n    PongService() &#123;\n        super(PongService.Channel);\n    &#125;\n\n    protected void handleServiceRequest(Request request, Message busMessage) &#123;\n\n        // which command shall we run?\n        switch(request.getRequest()) &#123;\n            case PongRequestType.Basic:\n                this.handleBasicPongRequest(request);\n                break;\n\n            case PongRequestType.Full:\n                this.handleFullPongRequest(request);\n                break;\n\n            case default:\n                this.handleUnknownRequest(request);\n                break;\n        &#125;\n    &#125;\n\n    /**\n     * Handle requests for basic pong needs\n     * @param request The request being sent over the bus.\n     */\n    private void handleBasicPongRequest(Request request) &#123;\n\n        // prepare and send a basic response.\n        Response&lt;String&gt; response = new Response&lt;&gt;(request.getId(), \"Fabric Pong (Basic): Pong\");\n        this.sendResponse(response, request.getId(), request.getTargetUser());\n    &#125;\n\n    /**\n     * Handle requests for full pong needs.\n     * @param request the request being sent over the bus.\n     */\n    private void handleFullPongRequest(Request request) &#123;\n\n        UUID transactionId = request.getId();\n\n        // call our calendar service and get a date and time, in two separate synchronous calls via transaction, pass\n        // in our request ID as the transaction ID, so it can be tracked correctly across service calls.\n        Transaction transaction = bus.createTransaction(Transaction.TransactionType.SYNC, \"calendar-transaction\", transactionId);\n\n        // queue up requests for time and date via Calendar Service.\n        transaction.sendRequest(CalendarService.Channel, new Request&lt;String&gt;(transactionId, \"date\")); // request date\n        transaction.sendRequest(CalendarService.Channel, new Request&lt;String&gt;(transactionId, \"time\")); // request time\n\n        // register complete handler for transaction.\n        transaction.onComplete(\n                (Message[] responses) -&gt; &#123;\n\n                    // concatenate service responses into a string.\n                    StringBuilder dateAndTime = new StringBuilder();\n                    for(Message msg: responses) &#123;\n                        String calendarResponse = ClassMapper.CastPayload(String.class, (Response)msg.getPayload());\n                        dateAndTime.append(calendarResponse + \" \"); // add each response together.\n                    &#125;\n\n                    // prepare a response, with our date and time requests stuck together as a more elaborate response.\n                    Response&lt;String&gt; response = new Response&lt;&gt;(request.getId(),\n                            \"Fabric Pong (Full): Pong++ \" + dateAndTime.toString());\n                    this.sendResponse(response, request.getId(), request.getTargetUser());\n                &#125;\n        );\n\n        // commit transaction.\n        transaction.commit();\n    &#125;\n&#125;\n\nabstract class PongRequestType &#123;\n    static final String Basic = \"Basic\";\n    static final String Full = \"Full\";\n&#125;\n</code></pre>\n\n<h3>\n    What is happening in the sample?\n</h3>\n\n<p>\n    First of all, the <code class=\"clr-code\">PongService</code> is handling two requests 'Basic' and 'Full' and everything else is returned as an error, with an unknown request.\n</p>\n\n\n<pre class=\"code\"><code class=\"language-java\" ngNonBindable>...\nprotected void handleServiceRequest(Request request, Message busMessage) &#123;\n\n    // which command shall we run?\n    switch(request.getRequest()) &#123;\n        case PongRequestType.Basic:\n            this.handleBasicPongRequest(request);\n            break;\n\n        case PongRequestType.Full:\n            this.handleFullPongRequest(request);\n            break;\n\n        case default:\n            this.handleUnknownRequest(request);\n            break;\n    &#125;\n&#125;\n...</code></pre>\n\n\n<hr/>\n<a routerLink=\"/java/private-channels\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Private Channels</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-messaging',\n  templateUrl: './messaging.component.html',\n  styleUrls: ['./messaging.component.scss']\n})\nexport class MessagingComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Understanding 'broadcast' vs 'direct' messaging</h1>\n\n<p>\n    Transport is analogous to Slack (for software), except Transport allows direct messages inside a channel, where\n    as Slack opens up stand-alone conversations between actors outside of a channel.\n    The concept however remains the same. When a component needs to restrict a conversation between its self, and a\n    service - we can use a direct message.\n</p>\n<p>\n    When another Class/Service is interested in everything being broadcast by a service, then that actor can simply\n    subscribe to the service channel and listen for everything.\n</p>\n\n<p>\n    The use case for direct messaging between a consumer and service arrives when you need a specific response to be\n    delivered to a specific consumer, i.e. you don't want every other listener on that channel\n    getting that same response (because we're operating on a single channel). It's like talking in a public chat, vs\n    talking in a direct message with that service.\n</p>\n\n<hr/>\n\n<h3>Sending requests using ID's</h3>\n\n<p>\n    There are three ways to conduct direct messaging. The first is to use methods in the\n    API that accept an ID. Every API (like request once <code class=\"clr-code\">()</code>)\n    has two variations, the first is the same method name that has <code class=\"clr-code\">...withId()</code> appended to\n    the end of the name.\n</p>\n<p>\n    The second is <code class=\"clr-code\">...withIdAndVersion()</code>.\n    The signature for both is mostly the same, except they obviously take an ID, or an ID and a version. Versions are not\n    used yet, however support is coming in future versions of the fabric.\n</p>\n<p>\n    The third is with a <strong class=\"empahsis\">Transaction</strong>.\n</p>\n\n<p>\n    Let's take a look at an example of using one of these methods:\n</p>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>const request: PongServiceRequest = &#123;\n    command: PongRequestType.Basic,\n    message: 'basic ping'\n&#125;;\n\nthis.bus.requestOnceWithId&lt;PongServiceRequest, PongServiceResponse&gt;(\n    UUID.randomUUID();,           // message id\n    'my-channel',                 // channel on which to send request\n    request,                      // payload to be sent on the channe\n).handle(\n    (response: SomeTypedResponse) =&gt; &#123;\n        // do something with this successful request\n    &#125;,\n    (error: GeneralError) =&gt; &#123;\n        // something went wrong, lets handle it.\n    &#125;\n);</code></pre>\n\n<p>\n    The above example will send a request to <code class=\"clr-code\">PongService</code>, but this time, we're sending\n    that message with a <strong>Random UUID</strong>. This means that the consumer\n    is only going to listen for a response that <strong>also contains that same ID</strong>. Any other response coming\n    in over <code class=\"clr-code\">PongServiceChannel</code> that has a different ID, or\n    has no ID <strong>will be ignored</strong> by the <code class=\"clr-code\">handle(...)</code> method.\n</p>\n\n<hr/>\n<h3>Quick note on generating UUID's</h3>\n<p>\n    Always use a valid UUID. Java makes it really easy. <code class=\"clr-code\">UUID.randomUUID()</code> is all you need.\n</p>\n\n<hr/>\n<a routerLink=\"/java/building-services\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Building Services</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'transport-initializing',\n  templateUrl: './initializing.component.html',\n  styleUrls: ['./initializing.component.scss']\n})\nexport class InitializingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>Initializing Transport</h1>\n\n<p>\n    The Java version of Transport depends on Spring. This makes it much, much simpler to build your applications using the bus.\n</p>\n\n<p>\n    There isn't actually anything you need to do to initialize the Transport. It's self booting once you import the Jar into your Java Application.\n<p>\n    <strong class=\"emphasis\">Pretty Cool eh? Don't you just ❤️ Spring.</strong>\n</p>\n"],"sourceRoot":"webpack:///"}