(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{xZAH:function(e,t,n){"use strict";n.r(t),n.d(t,"GolangModule",function(){return P});var i=n("ofXK"),r=n("tyNb"),o=n("fXoL"),a=n("8MG2"),l=n("320Y"),s=n("jQpT");const c=["mainContent"];function h(e,t){1&e&&(o.Pb(0,"clr-vertical-nav-group-children"),o.Pb(1,"a",8),o.zc(2," Importing Transport "),o.Ob(),o.Pb(3,"a",9),o.zc(4," Initializing Transport "),o.Ob(),o.Pb(5,"a",10),o.zc(6," Hello World! "),o.Ob(),o.Ob())}let b=(()=>{class e{constructor(){}ngOnInit(){}onActivate(e){this.mainContentDiv&&(this.mainContentDiv.nativeElement.scrollTop=0)}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Cb({type:e,selectors:[["transport-golang"]],viewQuery:function(e,t){if(1&e&&o.Fc(c,!0),2&e){let e;o.lc(e=o.Yb())&&(t.mainContentDiv=e.first)}},decls:13,vars:3,consts:[[1,"content-container"],[3,"clrVerticalNavCollapsible","clr-nav-level"],["clrVerticalNavLink","","routerLink","./overview","routerLinkActive","active"],["routerLinkActive","active"],[4,"clrIfExpanded"],["id","main-content",1,"content-area"],["mainContent",""],[3,"activate"],["clrVerticalNavLink","","routerLink","./importing","routerLinkActive","active"],["clrVerticalNavLink","","routerLink","./initializing","routerLinkActive","active"],["clrVerticalNavLink","","routerLink","./hello-world","routerLinkActive","active"]],template:function(e,t){1&e&&(o.Pb(0,"clr-main-container"),o.Kb(1,"transport-header"),o.Pb(2,"div",0),o.Pb(3,"clr-vertical-nav",1),o.Pb(4,"a",2),o.zc(5," Golang Overview "),o.Ob(),o.Pb(6,"clr-vertical-nav-group",3),o.zc(7," Getting Started "),o.xc(8,h,7,0,"clr-vertical-nav-group-children",4),o.Ob(),o.Ob(),o.Pb(9,"div",5,6),o.Pb(11,"router-outlet",7),o.Xb("activate",function(e){return t.onActivate(e)}),o.Ob(),o.Ob(),o.Ob(),o.Kb(12,"transport-footer"),o.Ob()),2&e&&(o.wb(3),o.gc("clrVerticalNavCollapsible",!1)("clr-nav-level",2),o.wb(5),o.gc("clrIfExpanded",!0))},directives:[a.f,a.p,l.a,a.l,a.g,r.b,a.o,r.a,a.m,a.s,a.e,r.d,s.a,a.n],styles:[""]}),e})();var g=n("QOlJ"),p=n("w7eE"),d=n("SrJx"),u=n("CyPm");function m(e,t){if(1&e&&(o.Pb(0,"section"),o.Pb(1,"h4",10),o.zc(2),o.Ob(),o.Kb(3,"transport-animated-console",11),o.Ob()),2&e){const e=t.$implicit,n=t.index;o.wb(2),o.Ac(e.title),o.wb(1),o.gc("inputCommand",e.command)("helperTxt",e.notes)("consoleTheme","macOS")("loopAnimation",!1)("delay",1e3*n)}}let v=(()=>{class e extends p.a{constructor(e){super("OverviewComponent"),this.highlightService=e,this.highlighted=!1}highlight(){this.highlightService.highlightAll()}ngOnInit(){this.goCommands=g.a}ngAfterViewChecked(){this.highlighted||(this.highlightService.highlightAll(),this.highlighted=!0)}}return e.\u0275fac=function(t){return new(t||e)(o.Ib(d.a))},e.\u0275cmp=o.Cb({type:e,selectors:[["transport-golang-overview"]],features:[o.tb],decls:20,vars:1,consts:[["src","assets/github.png","alt","github","title","transport on github",1,"github-logo"],["href","https://github.com/vmware/transport-go"],["role","alert",1,"alert","alert-info"],[1,"alert-items"],[1,"alert-item","static"],[1,"alert-icon-wrapper"],["shape","exclamation-circle",1,"alert-icon"],[1,"alert-text"],[4,"ngFor","ngForOf"],["routerLink","/golang/importing",1,"btn","btn-primary","btn-block","btn-outline"],[1,"code-step"],[3,"inputCommand","helperTxt","consoleTheme","loopAnimation","delay"]],template:function(e,t){1&e&&(o.Pb(0,"h1"),o.zc(1,"Transport for Go"),o.Ob(),o.Kb(2,"img",0),o.Pb(3,"a",1),o.zc(4,"View Golang source on Github"),o.Ob(),o.Kb(5,"br"),o.Kb(6,"br"),o.Pb(7,"div",2),o.Pb(8,"div",3),o.Pb(9,"div",4),o.Pb(10,"div",5),o.Kb(11,"clr-icon",6),o.Ob(),o.Pb(12,"span",7),o.zc(13," We're still working on these docs, please bear with us! "),o.Ob(),o.Ob(),o.Ob(),o.Ob(),o.Pb(14,"p"),o.zc(15," This implementation is written in Go. It does not use ReactiveX (unlike the Java and TypeScript) implementations. This is because there is no (reasonable) ReactiveX library available. So we built our own directly into Transport.\n"),o.Ob(),o.xc(16,m,4,6,"section",8),o.Kb(17,"hr"),o.Pb(18,"a",9),o.zc(19,"Next Steps: Importing Transport"),o.Ob()),2&e&&(o.wb(16),o.gc("ngForOf",t.goCommands))},directives:[a.d,a.b,i.m,r.b,u.a],styles:[""]}),e})();const w=[{path:"",component:b,children:[{path:"",component:v},{path:"overview",component:v},{path:"initializing",component:(()=>{class e{constructor(e){this.highlightService=e,this.highlighted=!1}ngOnInit(){}ngAfterViewChecked(){this.highlighted||(this.highlightService.highlightAll(),this.highlighted=!0)}}return e.\u0275fac=function(t){return new(t||e)(o.Ib(d.a))},e.\u0275cmp=o.Cb({type:e,selectors:[["transport-initializing"]],decls:11,vars:0,consts:[[1,"code"],[1,"language-go"],["routerLink","/golang/hello-world",1,"btn","btn-primary","btn-block","btn-outline"]],template:function(e,t){1&e&&(o.Pb(0,"h1"),o.zc(1,"Initializing Transport in Golang"),o.Ob(),o.Pb(2,"p"),o.zc(3," The bus exists as a singleton inside your application. The first time you ask for the bus, it will be created automatically and every supplemental call will return that same instance.\n"),o.Ob(),o.Kb(4,"br"),o.Pb(5,"pre",0),o.Pb(6,"code",1),o.Jb(),o.zc(7,'import "github.com/vmware/transport-go/bus"\n\nvar transport EventBus = bus.GetBus()'),o.Qb(),o.Ob(),o.Ob(),o.Kb(8,"hr"),o.Pb(9,"a",2),o.zc(10,"Next Steps: Hello World"),o.Ob())},directives:[r.b],styles:[""]}),e})()},{path:"importing",component:(()=>{class e{constructor(e){this.highlightService=e,this.highlighted=!1}ngOnInit(){}ngAfterViewChecked(){this.highlighted||(this.highlightService.highlightAll(),this.highlighted=!0)}}return e.\u0275fac=function(t){return new(t||e)(o.Ib(d.a))},e.\u0275cmp=o.Cb({type:e,selectors:[["transport-importing"]],decls:21,vars:4,consts:[[1,"clr-code"],[3,"inputCommand","consoleTheme","loopAnimation","delay"],[1,"code"],[1,"language-go"],["routerLink","/golang/initializing",1,"btn","btn-primary","btn-block","btn-outline"]],template:function(e,t){1&e&&(o.Pb(0,"h1"),o.zc(1,"Importing Transport in Golang"),o.Ob(),o.Pb(2,"p"),o.zc(3," The Go version of Transport has go.mod support. You should be able to easily add it using "),o.Pb(4,"code",0),o.zc(5,"go get"),o.Ob(),o.Ob(),o.Pb(6,"h3"),o.zc(7,"use "),o.Pb(8,"code",0),o.zc(9,"go get"),o.Ob(),o.Ob(),o.Kb(10,"br"),o.Kb(11,"transport-animated-console",1),o.Pb(12,"h3"),o.zc(13,"Adding to your app"),o.Ob(),o.Kb(14,"br"),o.Pb(15,"pre",2),o.Pb(16,"code",3),o.Jb(),o.zc(17,'import "github.com/vmware/transport-go/bus"'),o.Qb(),o.Ob(),o.Ob(),o.Kb(18,"hr"),o.Pb(19,"a",4),o.zc(20,"Next Steps: Initializing Transport"),o.Ob()),2&e&&(o.wb(11),o.gc("inputCommand","go get github.com/vmware/transport-go/...")("consoleTheme","macOS")("loopAnimation",!1)("delay",1))},directives:[u.a,r.b],styles:[""]}),e})()},{path:"hello-world",component:(()=>{class e{constructor(e){this.highlightService=e,this.highlighted=!1}ngOnInit(){}ngAfterViewChecked(){this.highlighted||(this.highlightService.highlightAll(),this.highlighted=!0)}}return e.\u0275fac=function(t){return new(t||e)(o.Ib(d.a))},e.\u0275cmp=o.Cb({type:e,selectors:[["transport-hello-world"]],decls:12,vars:0,consts:[[1,"code"],[1,"language-go"],[1,"log-output"]],template:function(e,t){1&e&&(o.Pb(0,"h1"),o.zc(1,"Hello World in Golang"),o.Ob(),o.Pb(2,"p"),o.zc(3," This is a very simple example, but it should shows the mechanics of how it works. These segments of code could be anywhere in your code base, it would work exactly the same.\n"),o.Ob(),o.Kb(4,"br"),o.Pb(5,"pre",0),o.Pb(6,"code",1),o.Jb(),o.zc(7,'// listen for a single request on \'some-channel\'\ntr := bus.GetBus()\nchannel := "hello-world"\n\n// create new channel\ntr.GetChannelManager().CreateChannel(channel)\n\n// listen for a single request on \'hello-world\'\nrequestHandler, _ := tr.ListenRequestStream(channel)\n\n// define request handler logic\nrequestHandler.Handle(\n   func(msg *model.Message) {\n        resp := msg.Payload.(string)\n        fmt.Printf("\\\\nHello: %s\\\\n", resp)\n\n        // send a response back.\n        tr.SendResponseMessage(channel, resp + " Doodly", msg.DestinationId)\n   },\n   func(err error) {\n        // something went wrong...\n   }\n)\n\n// send a request to \'hello-world\' and handle a single response\nresponseHandler, _ := tr.RequestOnce(channel, "Howdy")\n\n// define response handler logic\nresponseHandler.Handle(\n   func(msg *model.Message) {\n        fmt.Printf("World: %s\\\\n", msg.Payload.(string))\n   },\n   func(err error) {\n        // something went wrong...\n   })\n\n// fire the request.\nresponseHandler.Fire()\n'),o.Qb(),o.Ob(),o.Ob(),o.Pb(8,"p"),o.zc(9," This will produce something like...\n"),o.Ob(),o.Pb(10,"pre",2),o.zc(11,"\ud83c\udf08 Transport booted with id [e495e5d5-2b72-46dd-8013-d49049bd4800]\nHello: Howdy\nWorld: Howdy Doodly\n"),o.Ob())},styles:[""]}),e})()}]}];let f=(()=>{class e{}return e.\u0275mod=o.Gb({type:e}),e.\u0275inj=o.Fb({factory:function(t){return new(t||e)},imports:[[r.c.forChild(w)],r.c]}),e})();var O=n("PCNd");let P=(()=>{class e{}return e.\u0275mod=o.Gb({type:e}),e.\u0275inj=o.Fb({factory:function(t){return new(t||e)},imports:[[i.c,f,O.a,i.c,a.a]]}),e})()}}]);