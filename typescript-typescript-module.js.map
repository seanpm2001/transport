{"version":3,"sources":["./src/app/typescript/iframes/iframes.component.ts","./src/app/typescript/iframes/iframes.component.html","./src/app/typescript/importing/importing.component.ts","./src/app/typescript/importing/importing.component.html","./src/app/typescript/extending-channels/extending-channels.component.ts","./src/app/typescript/extending-channels/extending-channels.component.html","./src/app/typescript/abstractions/abstractions.component.ts","./src/app/typescript/abstractions/abstractions.component.html","./src/app/typescript/examples/stock-ticker/stock-ticker.component.ts","./src/app/typescript/examples/stock-ticker/stock-ticker.component.html","./src/app/typescript/advanced-messaging/advanced-messaging.component.ts","./src/app/typescript/advanced-messaging/advanced-messaging.component.html","./src/app/typescript/hello-world/hello-world.component.ts","./src/app/typescript/hello-world/hello-world.component.html","./src/app/typescript/examples/ping-pong/ping-pong.component.ts","./src/app/typescript/examples/ping-pong/ping-pong.component.html","./src/app/typescript/typescript.module.ts","./src/app/typescript/store-basics/store-basics.component.ts","./src/app/typescript/store-basics/store-basics.component.html","./src/app/typescript/calling-services/calling-services.component.ts","./src/app/typescript/calling-services/calling-services.component.html","./src/app/typescript/building-services/building-services.component.ts","./src/app/typescript/building-services/building-services.component.html","./src/app/typescript/typescript-routing.module.ts","./src/app/typescript/importing-react/importing-react.component.ts","./src/app/typescript/importing-react/importing-react.component.html","./src/app/typescript/logging/logging.component.ts","./src/app/typescript/logging/logging.component.html","./src/app/typescript/initializing/initializing.component.ts","./src/app/typescript/initializing/initializing.component.html","./src/app/typescript/overview/overview.component.ts","./src/app/typescript/overview/overview.component.html","./src/app/typescript/importing-angular/importing-angular.component.ts","./src/app/typescript/importing-angular/importing-angular.component.html","./src/app/typescript/importing-umd/importing-umd.component.ts","./src/app/typescript/importing-umd/importing-umd.component.html","./src/app/typescript/connecting-broker/connecting-broker.component.ts","./src/app/typescript/connecting-broker/connecting-broker.component.html","./src/app/typescript/multiple-brokers/multiple-brokers.component.ts","./src/app/typescript/multiple-brokers/multiple-brokers.component.html","./src/app/typescript/broker-overview/broker-overview.component.ts","./src/app/typescript/broker-overview/broker-overview.component.html","./src/app/typescript/transactions/transactions.component.ts","./src/app/typescript/transactions/transactions.component.html","./src/app/typescript/store-advanced/store-advanced.component.ts","./src/app/typescript/store-advanced/store-advanced.component.html","./src/app/typescript/examples/simple-stream/simple-stream.component.ts","./src/app/typescript/examples/simple-stream/simple-stream.component.html","./src/app/typescript/examples/joke/joke.component.ts","./src/app/typescript/examples/joke/joke.component.html","./src/app/typescript/typescript.component.ts","./src/app/typescript/typescript.component.html"],"names":[],"mappings":"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","file":"typescript-typescript-module.js","sourcesContent":["/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport { Component, OnInit } from '@angular/core';\nimport {MessageHandler, ProxyControl, ProxyType} from \"@vmw/transport\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\nimport {AbstractBase} from \"@vmw/transport/core\";\n\n@Component({\n  selector: 'transport-iframes',\n  templateUrl: './iframes.component.html',\n  styleUrls: ['./iframes.component.scss']\n})\nexport class IframesComponent extends AbstractBase implements OnInit {\n\n    private chatStream: MessageHandler<any>;\n    private proxyControl: ProxyControl;\n    public highlighted = false;\n\n    constructor(private highlightService: HighlightService) {\n        super('TsDistributedIframesComponent');\n    }\n\n    ngOnInit() {\n\n        // enable message proxy.\n        this.proxyControl = this.bus.enableMessageProxy({\n            protectedChannels: ['chatty-chat'],\n            proxyType: ProxyType.Parent,\n            parentOrigin: `https://vmware.github.io`,\n            acceptedOrigins: [\n                'http://localhost:4200',\n                'https://vmware.github.io'],\n            targetAllFrames: true,\n            targetSpecificFrames: null,\n        });\n\n        // ensure we open the chatty chat channel, to ensure messages are not dropped.\n        // we don't however care about doing anything with the traffic on the stream here.\n        this.chatStream = this.bus.listenStream('chatty-chat');\n        this.chatStream.handle(() => {\n        }); // do nothing, just ensure the channel is open.\n    }\n\n    ngOnDestroy() {\n        this.chatStream.close();\n        this.proxyControl.stopListening();\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Creating a distributed bus across iFrames</h1>\n\n<p>\n    The bus has the capability to connect up event bus instances running inside child applications. This allows a third party application that is also using Transport to connect\n    to the parent / master event bus. This allows the child application to talk to services in the parent UI, or even open connections to brokers and tap directly into live streams.\n</p>\n\n<p>\n    You have the ability to control which origins are allowed to join the distributed bus, also which channels are authorized to be exposed across the distributed bus. This ensures that\n    channels can be restricted across applications. You can also configure which iFrames are authorized to allow the bus instances to be connected.\n</p>\n\n<hr/>\n\n<h2>\n    Talking across applications in iFrames.\n</h2>\n\n<p>\n    Here we have three iframes, inside each iframe is an instance of this same application, but we have loaded a demo component into each iframe. This will give us a total of 4 independent instances\n    of Transport, One for each iframe and one that is running in this application, hosting the three iframes.\n</p>\n<p>\n    There is only a single channel that they care about. This is a channel we named <span class=\"emphasis\">'chatty-chat'</span>. Transport has been bridged between the three iframes and the main application. This means they can all talk\n    on the <span class=\"emphasis\">'chatty-chat'</span> channel, as if each separate application was running on the same event bus.\n</p>\n\n<br/>\n<div class=\"clr-row chatty-demo-container\">\n    <div class=\"clr-col-4\">\n        <section class=\"sample-container\">\n            <h3>iFrame A</h3>\n            <iframe scrolling=\"no\" src=\"/transport/iframe-demo\"></iframe>\n        </section>\n    </div>\n    <div class=\"clr-col-4\">\n        <section class=\"sample-container\">\n            <h3>iFrame B</h3>\n            <iframe scrolling=\"no\" src=\"/transport/iframe-demo\"></iframe>\n        </section>\n    </div>\n    <div class=\"clr-col-4\">\n        <section class=\"sample-container\">\n            <h3>iFrame C</h3>\n            <iframe scrolling=\"no\" src=\"/transport/iframe-demo\"></iframe>\n        </section>\n    </div>\n</div>\n<div class=\"alert alert-info\" role=\"alert\">\n    <div class=\"alert-items\">\n        <div class=\"alert-item static\">\n            <div class=\"alert-icon-wrapper\">\n                <clr-icon class=\"alert-icon\" shape=\"info-circle\"></clr-icon>\n            </div>\n            <span class=\"alert-text\">\n                In the demo above, the same application is loaded three times, all in separate iframes. They are all talking on individual instances of Transport,\n                that have all been bridged together, to form a distributed bus. iFrames are essentially sandboxed applications\n                that make it quite difficult to talk to and from.\n                There is a very limited messaging API via <code class=\"clr-code\">window.postMessage()</code> that allows parent and child applications to communicate, Transport uses this extensively to distribute streams.\n            </span>\n        </div>\n    </div>\n</div>\n\n<hr/>\n\n<h3>The Parent (Main Application)</h3>\n\n<p>\n    With this extensibility design, there will always be a parent application and child applications. The parent is the shell or containing application, it would provide shared infrastructure to any child application. Child applications are\n    applications loaded inside iframes, or in a ShadowDOM that is sandboxed.\n</p>\n<p>\n    This means a child application is completely isolated from the parent application. The parent cannot reach into down into its children and the child cannot reach back up to the parent.\n</p>\n\n<h3>Chatty Chat Parent</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>@Component( &#123;\n    selector: 'chatty-chat-app',\n    template: ` &lt;div class=\"clr-row chatty-demo-container\" &gt;\n     &lt;div class=\"clr-col-4\" &gt;\n         &lt;section class=\"sample-container\" &gt;\n             &lt;h3 &gt;iFrame A &lt;/h3 &gt;\n             &lt;iframe scrolling=\"no\" src=\"/chatty-chat\" &gt; &lt;/iframe &gt;\n         &lt;/section &gt;\n     &lt;/div &gt;\n     &lt;div class=\"clr-col-4\" &gt;\n         &lt;section class=\"sample-container\" &gt;\n             &lt;h3 &gt;iFrame B &lt;/h3 &gt;\n             &lt;iframe scrolling=\"no\" src=\"/chatty-chat\" &gt; &lt;/iframe &gt;\n         &lt;/section &gt;\n     &lt;/div &gt;\n     &lt;div class=\"clr-col-4\" &gt;\n         &lt;section class=\"sample-container\" &gt;\n             &lt;h3 &gt;iFrame C &lt;/h3 &gt;\n             &lt;iframe scrolling=\"no\" src=\"/chatty-chat\" &gt; &lt;/iframe &gt;\n         &lt;/section &gt;\n     &lt;/div &gt;`\n &#125;)\nexport class ChattyChatParent extends AbstractBase implements OnInit  &#123;\n\n    constructor()  &#123;\n        super('ChattyChatParent');\n     &#125;\n\n    ngOnInit()  &#123;\n        // enable bus message proxy (enable distributed event bus mode)\n        this.bus.enableMessageProxy( &#123;\n            protectedChannels: ['chatty-chat'],\n            proxyType: ProxyType.Parent,                    // runs as parent\n            parentOrigin: `https://github.com`,\n            acceptedOrigins: [\n                'http://localhost:4200',                    // local dev\n                'https://github.com'],             // production\n            targetAllFrames: true,\n            targetSpecificFrames: null,\n         &#125;);\n\n        // ensure we open the chatty chat channel, to ensure messages are not dropped.\n        // we don't however care about doing anything with the traffic on the stream here.\n        this.bus.listenStream('chatty-chat')\n            .handle(() = &gt;  &#123;\n             &#125;); // do nothing, just ensure the channel is open.\n     &#125;\n &#125;</code></pre>\n\n<hr/>\n\n\n<h3>Chatty Chat Child</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>@Component(&#123;\n    selector: 'chatty-chat-child',\n    template: `&lt;section class=\"chat-container\"&gt;\n        &lt;div class=\"message-label\"&gt;\n            Messages Received\n        &lt;/div&gt;\n        &lt;div [ngClass]=\"&#123; 'message-count': true, flash: flash&#125;\"&gt;\n            &#123;&#123;messageCount&#125;&#125;\n        &lt;/div&gt;\n        &lt;div class=\"broadcast\"&gt;\n            &lt;button (click)=\"sendChat()\" class=\"btn btn-primary-outline\" [disabled]=\"buttonDisabled\"&gt;\n                Broadcast Something\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/section&gt;`\n&#125;)\nexport class ChattyChatChildApp extends AbstractBase implements OnInit &#123;\n\n    public messageCount = 0;\n    public flash = false;\n    public buttonDisabled = false;\n\n    constructor() &#123;\n        super('ChattyChatComponent');\n    &#125;\n\n    ngOnInit(): void &#123;\n        // enable message proxy.\n        this.bus.enableMessageProxy(&#123;\n            protectedChannels: ['chatty-chat'],\n            proxyType: ProxyType.Child,                     // runs as child.\n            parentOrigin: `https://github.com`,\n            acceptedOrigins: [\n                'http://localhost:4200',                    // local dev\n                'https://github.com'],             // production\n            targetAllFrames: true,\n            targetSpecificFrames: null,\n        &#125;);\n\n        // listen to chatty chat, increment message count for every message that comes in.\n        this.bus.listenStream('chatty-chat')\n            .handle(\n                () =&gt; &#123;\n                    // increase message count.\n                    this.messageCount++;\n\n                    // flash message\n                    this.flash = true;\n\n                    // wait a second then remove flash and re-enable button\n                    this.bus.api.tickEventLoop(\n                        () =&gt; &#123;\n                            this.buttonDisabled = false;\n                            this.flash = false;\n                        &#125;, 1000\n                    );\n                &#125;\n            );\n    &#125;\n\n    sendChat(): void &#123;\n        if (!this.buttonDisabled) &#123;\n            // disable button.\n            this.buttonDisabled = true;\n\n            // send an empty message to chatty-chat.\n            this.bus.sendResponseMessage('chatty-chat', &#123;&#125;);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<hr/>\n\n<div class=\"alert alert-info\" role=\"alert\">\n    <div class=\"alert-items\">\n        <div class=\"alert-item static\">\n            <div class=\"alert-icon-wrapper\">\n                <clr-icon class=\"alert-icon\" shape=\"info-circle\"></clr-icon>\n            </div>\n            <span class=\"alert-text\">\n                <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/proxy/message.proxy.api.ts\">You can take a look at the API</a> if you'd like to know more.\n            </span>\n        </div>\n    </div>\n</div>\n\n<hr/>\n<a routerLink=\"/ts/abstractions\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Abstractions</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from '@vmw/transport-docs/services/highlight.service';\n\n@Component({\n  selector: 'transport-importing',\n  templateUrl: './importing.component.html',\n  styleUrls: ['./importing.component.scss']\n})\nexport class ImportingComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Importing Transport for TypeScript via ES6 Module</h1>\n\n<p>\n    Make sure you install transport first, Package is available via npm.\n</p>\n<br/>\n<transport-animated-console [inputCommand]=\"'npm install @vmw/transport --save'\"\n                            [consoleTheme]=\"'macOS'\"\n                            [loopAnimation]=\"false\"\n                            [disableAnimation]=\"true\">\n</transport-animated-console>\n\n<hr/>\n\n<h2>ES6 Module Import (recommended)</h2>\n\n<p>\n    This is way we recommend you import Transport. It allows build management tools such as Webpack to tree-shake unused\n    exports of the library. This in turn shaving off some bits and reduces overall size of your application.\n</p>\n<p>\n    To import and initialize Transport, simply call <code class=\"clr-code\">BusUtil.bootBus()</code> as follows:\n</p>\n\n<pre class=\"code\"><code class=\"language-js\" ngNonBindable>import &#123; BusUtil &#125; from '@vmw/transport/util/bus.util';\n\n// boot the event bus!\nBusUtil.bootBus();\n\n// create a reference to the bus\nconst bus = BusUtil.getBusInstance();\n\n// now do something interesting.\n...\n</code></pre>\n\n\n<h4><a href=\"https://stackblitz.com/edit/js-kduy8v?file=index.js\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/js-kduy8v?file=index.js&ctl=1&embed=1\" class=\"stackblitz\"></iframe>\n\n\n<hr/>\n<h2>Importing Transport in your code</h2>\n\n<p>\n    The main interface you will need is <code class=\"clr-code\">EventBus</code>. It provides access to the most common methods.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable> import &#123; EventBus &#125; from '@vmw/transport';</code></pre>\n<hr/>\n<a routerLink=\"/ts/initializing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Initializing Transport</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\nimport {AbstractBase} from \"@vmw/transport/core\";\n\n@Component({\n    selector: 'transport-extending-channels',\n    templateUrl: './extending-channels.component.html',\n    styleUrls: ['./extending-channels.component.scss']\n})\nexport class ExtendingChannelsComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('ExtendingChannelsComponent')\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Extending local channels to be 'Galactic' Channels.</h1>\n\n<p>\n    Extending channels is the concept of being able to decide which channels you extend to a broker, and how you map them to destinations on those brokers.\n</p>\n\n<h2>Galactic Channels</h2>\n\n<p>\n    When Transport was being developed, it was originally had a code name of 'Bifröst'. The term 'Galactic' Channel, stems from the idea that you could extend a channel to any other destination, on any compatible broker.\n</p>\n<p>\n    Essentially, marking a channel as galactic <strong class=\"emphasis\">extends it to a broker destination</strong>, marking it as local <strong class=\"emphasis\">boxes it to the local application</strong> only.\n</p>\n<hr/>\n<h2>Marking a channel as Galactic</h2>\n\n<p>\n    Use the <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/bus.api.ts#L446\"><code class=\"clr-code\">bus.markChannelAsGalactic()</code></a> method. You can supply a broker identity, if you're\n    using multiple brokers, to make sure you don't extend channels to all brokers.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>this.bus.markChannelAsGalactic('simple-stream');</code></pre>\n\n<p> To stop extending a channel, use the <code class=\"clr-code\">bus.markChannelAsLocal()</code> method</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>this.bus.markChannelAsLocal('simple-stream');</code></pre>\n\n<hr/>\n\n<h2>Private Channels (Topics)</h2>\n\n<p>\n    If you're using the <a routerLink=\"/java/overview\">Java</a> or  <a routerLink=\"/golang/overview\">Golang</a> version of Transport as your backend/service broker, you can use the optional  <code class=\"clr-code\">isPrivate</code> argument and set it to true. This will use a queue instead of a topic\n    to communicate with your backend service. This is important if you don't want other clients or components in your applications to pick up this traffic.\n</p>\n\n<h4>\n    Using <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/fabric.api.ts#L92\"><code class=\"clr-code\">this.fabric.generateFabricRequest</code></a>?\n</h4>\n\n<p>\n    This method creates a fabric ready request, capable of being routed across to services that are listening on remote / galactic channels, and that are using the Transport Java or Golang.\n    You supply a command and an optional payload to send.\n</p>\n<h4>\n    Can I message over galactic channels without using  <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/fabric.api.ts#L92\"><code class=\"clr-code\">this.fabric.generateFabricRequest</code></a>?\n</h4>\n<p>\n    Yes. You can send what ever you like.\n</p>\n\n<hr/>\n<h4>\n    👉 Use requests that operate over ID's or Transactions instead of public requests/responses to avoid crosstalk. 👈\n</h4>\n<hr/>\n<a routerLink=\"/ts/store-basics\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: store basics</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-abstractions',\n  templateUrl: './abstractions.component.html',\n  styleUrls: ['./abstractions.component.scss']\n})\nexport class AbstractionsComponent  extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('AbstractionsComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Using Transport via built in abstractions</h1>\n\n<p>\n    There are a number of core abstractions provided that hide and encapsulate boilerplate and bus logic, as well as standardize designs and\n    patterns across applications. These abstractions vary for different use cases and different needs.\n</p>\n<p>\n    Extending from the provided abstractions cleanly encapsulates essential properties that every actor will require.\n</p>\n<hr/>\n\n<h3 id=\"abstractcore\">Using <code class=\"clr-code\">AbstractCore</code> - <span class=\"emphasis\">lowest level access</span></h3>\n\n<p>\n    <code class=\"clr-code\">AbstractCore</code> provides access to four essential properties to all subclasses. It can\n    imported into your code from <code class=\"clr-code\">@vmw/transport/core</code>.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; AbstractCore &#125; from '@vmw/transport/core';</code></pre>\n\n<ul class=\"list\">\n    <li><code class=\"clr-code\">this.bus</code> - <span class=\"emphasis\">Access to the global event bus</span></li>\n    <li><code class=\"clr-code\">this.storeManager</code> -  <span class=\"emphasis\">Access to global store manager</span></li>\n    <li><code class=\"clr-code\">this.log</code> -  <span class=\"emphasis\">Access to logging.</span></li>\n    <li><code class=\"clr-code\">this.fabric</code> - <span class=\"emphasis\">Access to Fabric APIs (alpha)</span></li>\n</ul>\n\n<p>\n    <code class=\"clr-code\">AbstractCore</code> is actually quite basic, You can see the code at:\n    <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/core/abstractions/abstract.core.ts\"\n       target=\"_blank\">\n        https://github.com/vmware/transport-typescript/blob/master/src/core/abstractions/abstract.core.ts\n    </a>\n</p>\n\n<p>\n    To use <code class=\"clr-code\">AbstractCore</code>, simply extend your class from it, like the following example.\n</p>\n\n<pre class=\"code\">\n<code class=\"language-typescript\" ngNonBindable>\nimport &#123; AbstractCore &#125; from '@vmw/transport/core';\n\nexport class MyClass extends AbstractCore &#123;\n    constructor() &#123;\n        // ...now you have access to this.bus, this.storeManager and this.log\n    &#125;\n&#125;\n</code>\n</pre>\n\n<p>\n    <code class=\"clr-code\">AbstractCore</code> is useful, but there is preferred Abstraction to use. <strong class=\"emphasis\">AbstractBase</strong>\n</p>\n\n<hr/>\n\n<h3 id=\"abstractbase\">Using <code class=\"clr-code\">AbstractBase</code> - <span class=\"emphasis\">recommended</span>&nbsp;✨</h3>\n\n<p>\n    <code class=\"clr-code\">AbstractBase</code> extends <code class=\"clr-code\">AbstractCore</code>,\n    so it not only has access to low level objects, it provides some higher level functionality. This class provides access to global operations.\n</p>\n\n<p>\n    <code class=\"clr-code\">AbstractBase</code> is where all feature abstractions are added, so if you want to access new stuff for free? This is the abstraction you want.\n</p>\n\n<p>\n    To use <code class=\"clr-code\">AbstractBase</code>, simply extend your class from it, like the following example.\n</p>\n\n<pre class=\"code\">\n<code class=\"language-typescript\" ngNonBindable>\nimport &#123; AbstractBase &#125; from '@vmw/transport/core';\n\nexport class MyClass extends AbstractBase &#123;\n    constructor() &#123;\n        super('MyClass'); // AbstractBase requires a constructor arg\n                          // of the name of the class, used for logging purposes.\n\n        // ...now you have access to this.bus, this.storeManager and this.log\n    &#125;\n&#125;\n</code>\n</pre>\n<p>\n    This should be all you would ever need. There is another abstraction for building services however.\n</p>\n\n<hr/>\n<h3 id=\"abstractservice\">Using <code class=\"clr-code\">AbstractService</code> - foundation for services</h3>\n\n<p>\n    <code class=\"clr-code\">AbstractService</code> extends <code class=\"clr-code\">AbstractBase</code>.\n    It encapsulates logic required to handle and process inbound requests on a channel, and issue responses.\n\n</p>\n<p>\n    <code class=\"clr-code\">AbstractService</code> employs generics to define the request object type and response object\n    type it employs.\n</p>\n<p>\n\n</p>\n<p>\n    There is a single contracted method that an implementing class must provide a concrete method for. This method is\n    <code class=\"clr-code\">handleServiceRequest(request: ReqT)</code>. A service will implement the logic\n    required to handle any requests being made on the channel\n</p>\n<p>\n    The whole purpose of a service, is to encapsulate business logic that performs complex (non-rendering) tasks, or\n    talks to infrastructure to read, query or mutate state. A few good\n    examples of services would be crunching numbers & formulas, parsing and validating objects or JSON, marshaling and\n    un-marshaling data to and from DTO's, calling API's etc.\n</p>\n<p>\n    The key benefit to <strong>*not*</strong> using a third party vendor framework for handling services, is that the\n    service and the logic it contains becomes 100% decoupled from\n    that framework and can be ported across UI's and technology stacks. Another key benefit, is that the service can be\n    <strong>pushed down the stack</strong> and out of the browser using the fabric.\n</p>\n\n<p>\n    To use <code class=\"clr-code\">AbstractService</code>, simply extend your class from it and provide your own implementation of <code class=\"clr-code\">handleServiceRequest(request: ReqT)</code>.\n    The following sample demonstrates what this looks like.\n</p>\n<h3>Example Service</h3>\n<pre class=\"code\">\n<code class=\"language-typescript\" ngNonBindable>\nimport &#123; AbstractService &#125; from '@vmw/transport/core';\n\nexport class MyRequest &#123;\n    public payload: any;\n&#125;\n\nexport class MyResponse &#123;\n    public payload: any;\n&#125;\n\n\nexport class MyService extends AbstractService&lt;MyRequest, MyResponse&gt; &#123;\n    constructor() &#123;\n        super('MyService', 'service-channel'); // the second argument defines\n                                               // the channel in which the service listens on.\n    &#125;\n\n    protected handleServiceRequest(request: MyRequest): void &#123;\n\n        // ...do what ever you need to do with this request.\n        // ...when you're done, you would return your response\n        // ...to the requesting actor by this.postResponse(channel, response);\n\n        const myResponse: MyResponse = new MyResponse(&#123;payload: 'anything'&#125;);\n        this.postResponse('service-channel', myResponse);\n\n    &#125;\n\n&#125;\n</code>\n</pre>\n\n<p>\n    Your request/responses can be of your own design. You don't need a 'payload' property. This is just for illustration purposes.\n</p>\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'transport-stock-ticker',\n    templateUrl: './stock-ticker.component.html',\n    styleUrls: ['./stock-ticker.component.scss']\n})\nexport class StockTickerComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","<h1>Transport for TypeScript Example: Stock Ticker</h1>\n\n<p>\n    In this example, we have used <a href=\"https://clarity.design/\">Clarity Core</a>, combined with <a href=\"https://reactjs.org/\">React</a>.\n    We have created a simple <code class=\"clr-code\">StockTicker.tsx</code> Component that renders out a form input, along with\n    a button. Type in any known stock ticker symbol and press the button.\n</p>\n\n<p>\n    When you submit the form, the component uses Transport to call our live demo broker that uses <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a>.\n</p>\n\n<p>\n    <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a> is running a simple\n    <a href=\"https://github.com/vmware/transport-go/blob/main/plank/services/stock-ticker-service.go\">stock ticker service</a> on the <code class=\"clr-code\">stock-ticker-service</code>\n    channel.\n</p>\n\n<p>\n    The provider API has a hard limit of 5 calls per minute and 500 calls per day, so you may see an error. Sorry.\n</p>\n\n<br/>\n\n<iframe src=\"https://codesandbox.io/embed/transport-example-stock-checker-1rpzn?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2FStockCheck.tsx&theme=dark\"\n        style=\"width:100%; height:90%; border:0; border-radius: 4px; overflow:hidden;\"\n        title=\"Transport Example: Stock Checker\"\n        allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n        sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-advanced-messaging',\n  templateUrl: './advanced-messaging.component.html',\n  styleUrls: ['./advanced-messaging.component.scss']\n})\nexport class AdvancedMessagingComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('AdvancedMessagingComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Advanced Messaging Concepts</h1>\n\n<p>The basic concept of Transport is simple, but sometimes you need more control, like direct or broadcast conversations\nwithin channels. Some times you need to make sure you don't want conversations mixed up multiple components are messaging\nservices, or listening for specific responses on a s</p>\n\n<h3>Understanding 'broadcast' vs 'direct' messaging</h3>\n\n<p>\n    Transport is analogous to Slack (for software), except Transport allows direct messages inside a channel, where\n    as Slack opens up stand-alone conversations between actors outside of a channel.\n    The concept however remains the same. When a component needs to restrict a conversation between its self, and a\n    service - we can use a direct message.\n</p>\n<p>\n    When a component is interested in everything being broadcast by a service, then that component can simply\n    subscribe to the service channel and listen for everything.\n</p>\n\n<p>\n    The use case for direct messaging between a component and service arrives when you need a specific response to be\n    delivered to a specific component, i.e. you don't want every component\n    getting that same response (because we're operating on a single channel). It's like talking in a public chat, vs\n    talking in a direct message with that service.\n</p>\n\n<hr/>\n\n<h3>Sending requests using ID's</h3>\n\n<p>\n    There are multiple ways to conduct direct messaging between a component and a service. The first is to use methods in the\n    API that accept an ID. Every API e.g.  <code class=\"clr-code\">requestOnce()</code>\n    has multiple variations, one is the same method name that has <code class=\"clr-code\">...withId()</code> appended to\n    the end of the name.\n\n</p>\n<p>\n    another is <code class=\"clr-code\">...withIdAndVersion()</code>.\n    The signature for both is mostly the same, except they obviously take an ID, or an ID and a version.\n</p>\n<p>\n    Let's take a look at an example of using one of these methods:\n</p>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>const request: PongServiceRequest = &#123;\n    command: PongRequestType.Basic,\n    message: 'basic ping'\n&#125;;\n\nthis.bus.requestOnceWithId&lt;PongServiceRequest, PongServiceResponse&gt;(\n    '123456',           // message id\n    PongServiceChannel, // channel on which to send request\n    request,            // payload to be sent on the channel\n    PongServiceChannel, // channel on which to listen for response **\n    'PingComponent'     // optional identifier of requesting component\n).handle(\n    (response: PongServiceResponse) =&gt; &#123;\n        // do something with this successful request\n    &#125;,\n    (error: GeneralError) =&gt; &#123;\n        // something went wrong, lets handle it.\n    &#125;\n);</code></pre>\n\n<p class=\"p5\">\n    <strong>**</strong> In earlier versions of Transport, we used to use a different return channel for responses,\n    this design has been phased out, however you can still use it\n    if you need to. We're using the same request and response channel (preferred design).\n</p>\n<p>\n    The above example will send a request to <code class=\"clr-code\">PongService</code>, but this time, we're sending\n    that message with an ID of <strong>123456</strong>. This means that the component\n    is only going to listen for a response that <strong>also contains that same ID</strong>. Any other response coming\n    in over <code class=\"clr-code\">PongServiceChannel</code> that has a different ID, or\n    has no ID <strong>will be ignored</strong> by the <code class=\"clr-code\">handle(...)</code> method.\n</p>\n\n<hr/>\n<h3>Quick note on generating UUID's</h3>\n<p>\n    In the example above, we used <strong>123456</strong> as an ID for the message. This isn't very scalable and really\n    you should not be worrying about generating these ID's, particularly because there\n    could be thousands of messages being passed around channels. ID's should be generated instead of manually created.\n</p>\n<p>\n    There is a simple utility provided by the event bus that allows you to do this easily.\n    By using <code class=\"clr-code\">GeneralUtil</code>, you can generate full, or short UUID's. You can import <code\n    class=\"clr-code\">GeneralUtil</code> from <code class=\"clr-code\">@vmw/transport/util/util</code>.\n</p>\n<p>\n    It's pretty simple to use as well, all the methods are static.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>GeneralUtil.genUUID();      // generates full 128bit random UUID\nGeneralUtil.genUUIDShort(); // generates full 128bit random UUID, but truncates to only the first 8 characters.</code></pre>\n<hr/>\n<a routerLink=\"/ts/transactions\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Transactions</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\nimport {AbstractBase} from \"@vmw/transport/core\";\n\n@Component({\n  selector: 'transport-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.scss']\n})\nexport class HelloWorldComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('HelloWorldComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Hello World in TypeScript</h1>\n\n<p>\n    To demonstrate the simplest possible use of the event bus, we will create a simple component that simply talks to its self.\n</p>\n\n<h3>Angular Example</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; Component, Input, OnInit &#125; from '@angular/core';\nimport &#123; AbstractBase &#125; from '@vmw/transport/core';\n\n@Component(&#123;\n    selector: 'hello-world',\n    template: `\n    &lt;h1&gt;Transport: Hello World Angular&lt;/h1&gt;\n    &lt;p&gt;\n      Sending Ping (to myself):\n    &lt;/p&gt;\n    &lt;hr /&gt;\n    &lt;p&gt;\n      Ping:\n      &lt;strong&gt;&lt;code&gt;&#123;&#123; ping &#125;&#125;&lt;/code&gt;&lt;/strong&gt;\n    &lt;/p&gt;\n    &lt;p&gt;\n      Pong:\n      &lt;strong&gt;&lt;code&gt;&#123;&#123; pong &#125;&#125;&lt;/code&gt;&lt;/strong&gt;\n    &lt;/p&gt;\n  `,\n    styles: []\n&#125;)\nexport class HelloWorldComponent extends AbstractBase implements OnInit &#123;\n    @Input() ping: string;\n    public pong: string;\n\n    // define a channel to talk on.\n    private myChannel = 'some-channel';\n\n    constructor() &#123;\n        super('HelloWorldComponent');\n    &#125;\n\n    ngOnInit(): void &#123;\n        // listen for requests on 'myChannel' and return a response.\n        this.bus.respondOnce(this.myChannel)\n            .generate((request: string) =&gt; &#123;\n                return 'Message received! ' + request;\n            &#125;);\n\n        // send request 'hello' on channel 'myChannel'.\n        this.bus.requestOnce(this.myChannel, this.ping)\n            .handle((response: string) =&gt; &#123;\n                this.pong = response;\n            &#125;);\n    &#125;\n&#125;\n</code></pre>\n\n<h4><a href=\"https://stackblitz.com/edit/angular-hbyhd5\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/angular-hbyhd5?ctl=1&embed=1&file=src/app/hello-world.component.ts\" class=\"stackblitz\"></iframe>\n\n<hr/>\n<h3>React Example</h3>\n\n<p>\n    There are multiple ways to use transport inside of any UI framework, so to keep things simple, we have created a\n    small but useful React Component superclass that makes the bus available easily.\n</p>\n\n<pre class=\"code\">\n<code class=\"language-typescript\" ngNonBindable>import &#123; EventBus &#125; from '@vmw/transport/bus.api';\nimport &#123; BusUtil &#125; from '@vmw/transport/util';\nimport React from 'react';\n\nexport abstract class BaseComponent&lt;A, S&gt; extends React.Component&lt;A, S&gt; &#123;\n    public bus: EventBus = BusUtil.getBusInstance();\n    constructor(props: A) &#123;\n    super();\n  &#125;\n&#125;\n\n/* Define application state and props */\ninterface AppProps  &#123;\n    ping: string;\n &#125;\ninterface AppState  &#123;\n    pong: string;\n&#125;</code></pre>\n\n<p>\n Now that we have that little superclass there, we can go ahead and create the  <code class=\"clr-code\">HelloWorld</code>\n</p>\n\n<pre class=\"code\">\n<code class=\"language-typescript\" ngNonBindable>\nimport &#123; BaseComponent } from './BaseComponent';\nimport React from 'react';\n\nexport default class HelloWorld extends BaseComponent&lt;AppProps, AppState&gt; &#123;\n    // define a channel to talk on.\n    private myChannel = 'some-channel';\n\n    constructor(props: AppProps) &#123;\n        super(props);\n        this.state = &#123;\n            ping: props.ping,\n            pong: 'no response'\n        &#125;;\n    &#125;\n\n    componentDidMount() &#123;\n        // listen for requests on 'myChannel' and return a response.\n        this.bus.respondOnce(this.myChannel).generate((request: string) => &#123;\n            return 'Message received! ' + request;\n        &#125;);\n\n        // send request 'hello' on channel 'myChannel'.\n        this.bus.requestOnce(this.myChannel, this.props.ping)\n          .handle((response: string) => &#123;\n\n            // set state.\n            this.setState(&#123; pong: response &#125;);\n          &#125;);\n    &#125;\n\n    render() &#123;\n        return (\n          &lt;div&gt;\n            &lt;h1&gt;Transport: Hello World React&lt;/h1&gt;\n              &lt;p&gt;Sending Ping (to myself):&lt;/p&gt;\n              &lt;hr /&gt;\n            &lt;p&gt;\n              Ping:&nbsp;\n              &lt;strong&gt;\n                &lt;code&gt;&#123;this.state.ping&#125;&lt;/code&gt;\n              &lt;/strong&gt;\n            &lt;/p&gt;\n            &lt;p&gt;\n              Pong:&nbsp;\n              &lt;strong&gt;\n                &lt;code&gt;&#123;this.state.pong&#125;&lt;/code&gt;\n            &lt;/strong&gt;\n            &lt;/p&gt;\n          &lt;/div&gt;\n        );\n  &#125;\n&#125;\n</code>\n</pre>\n\n<h4><a href=\"https://stackblitz.com/edit/react-ts-vxv7zh\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/react-ts-vxv7zh?ctl=1&embed=1&file=HelloWorld.tsx\" class=\"stackblitz\"></iframe>\n\n<p>\n    In the above examples, we set up a simple lambda to handle an inbound message (request). This responder uses the\n    <code class=\"clr-code\">respondOnce()</code> method\n    to listen for a single request, this method returns an object of type <code class=\"clr-code\">MessageResponder&lt;string&gt;</code>.\n    Responders generate responses by\n    using the <code class=\"clr-code\">generate()</code> method. You simply pass in a lambda that accepts a request\n    argument (in the case of this example <code class=\"clr-code\">request: string</code>),\n    and returns a response (in this example <code class=\"clr-code\">'world'</code>).\n</p>\n\n\n\n\n<hr/>\n\n<div class=\"alert alert-success\" role=\"alert\">\n    <div class=\"alert-items\">\n        <div class=\"alert-item static\">\n            <div class=\"alert-icon-wrapper\">\n                <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\n            </div>\n            <span class=\"alert-text\">\n                   That's basically it. There are tons more features, however you can essentially locate your sender and receivers in any component, anywhere in your application\n                and this will work. This is the value of transport, you can 'jump' anything, any-where, to any-point in your application.\n                </span>\n        </div>\n    </div>\n</div>\n<hr/>\n<a routerLink=\"/ts/broker-overview\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Broker Overview</a>\n\n\n\n\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'transport-ping-pong',\n    templateUrl: './ping-pong.component.html',\n    styleUrls: ['./ping-pong.component.scss']\n})\nexport class PingPongComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","<h1>Transport for TypeScript Example: Ping Pong</h1>\n\n<p>\n    In this example, we have used <a href=\"https://clarity.design/\">Clarity Core</a>, combined with <a href=\"https://reactjs.org/\">React</a>.\n    We have created a simple <code class=\"clr-code\">PingPong.tsx</code> Component that renders out a form input, along with\n    a button.\n</p>\n\n<p>\n    When you submit the form, the component uses Transport to call our live demo broker that uses <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a>.\n</p>\n\n<p>\n    <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a> is running a simple <a href=\"https://github.com/vmware/transport-go/blob/main/plank/services/ping-pong-service.go\">ping pong service</a> on <code class=\"clr-code\">ping-pong-service</code>\n    channel.\n</p>\n\n<br/>\n\n<iframe src=\"https://codesandbox.io/embed/transport-example-ping-pong-broker-0gmlk?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2FPingPong.tsx&theme=dark\"\n        style=\"width:100%; height:90%; border:0; border-radius: 4px; overflow:hidden;\"\n        title=\"Transport Example: Ping Pong Broker\"\n        allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n        sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TypescriptRoutingModule} from './typescript-routing.module';\nimport {TypescriptComponent} from './typescript.component';\nimport {SharedModule} from '../shared/shared.module';\nimport {ClarityModule} from '@clr/angular';\nimport {OverviewComponent} from './overview/overview.component';\nimport {ImportingComponent } from './importing/importing.component';\nimport { InitializingComponent } from './initializing/initializing.component';\nimport { HelloWorldComponent } from './hello-world/hello-world.component';\nimport { BuildingServicesComponent } from './building-services/building-services.component';\nimport { CallingServicesComponent } from './calling-services/calling-services.component';\nimport { AdvancedMessagingComponent } from './advanced-messaging/advanced-messaging.component';\nimport { TransactionsComponent } from './transactions/transactions.component';\nimport { LoggingComponent } from './logging/logging.component';\nimport { BrokerOverviewComponent } from './broker-overview/broker-overview.component';\nimport { ConnectingBrokerComponent } from './connecting-broker/connecting-broker.component';\nimport { MultipleBrokersComponent } from './multiple-brokers/multiple-brokers.component';\nimport { ExtendingChannelsComponent } from './extending-channels/extending-channels.component';\nimport { StoreBasicsComponent } from './store-basics/store-basics.component';\nimport { StoreAdvancedComponent } from './store-advanced/store-advanced.component';\nimport { IframesComponent } from './iframes/iframes.component';\nimport { IframeDemoComponent } from './iframes/iframe-demo/iframe-demo.component';\nimport { AbstractionsComponent } from './abstractions/abstractions.component';\nimport { ImportingAngularComponent } from './importing-angular/importing-angular.component';\nimport { ImportingUmdComponent } from './importing-umd/importing-umd.component';\nimport { ImportingReactComponent } from './importing-react/importing-react.component';\nimport { PingPongComponent } from './examples/ping-pong/ping-pong.component';\nimport { StockTickerComponent } from './examples/stock-ticker/stock-ticker.component';\nimport { SimpleStreamComponent } from './examples/simple-stream/simple-stream.component';\nimport { JokeComponent } from './examples/joke/joke.component';\n\n\n@NgModule({\n    declarations: [TypescriptComponent, OverviewComponent, ImportingComponent, InitializingComponent, HelloWorldComponent,\n        BuildingServicesComponent, CallingServicesComponent, AdvancedMessagingComponent, TransactionsComponent, LoggingComponent,\n        BrokerOverviewComponent, ConnectingBrokerComponent, MultipleBrokersComponent, ExtendingChannelsComponent,\n        StoreBasicsComponent, StoreAdvancedComponent, IframesComponent, IframeDemoComponent, AbstractionsComponent,\n        ImportingAngularComponent, ImportingUmdComponent, ImportingReactComponent, PingPongComponent,\n        StockTickerComponent, SimpleStreamComponent, JokeComponent],\n    imports: [\n        CommonModule,\n        TypescriptRoutingModule,\n        SharedModule,\n        CommonModule,\n        ClarityModule,\n    ]\n})\nexport class TypescriptModule {\n}\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-store-basics',\n  templateUrl: './store-basics.component.html',\n  styleUrls: ['./store-basics.component.scss']\n})\nexport class StoreBasicsComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('TransactionsComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Understanding and using Stores.</h1>\n\n<h3>Stores are used to represent source-of-truth state in your applications.</h3>\n<p>\n\n</p>\n\n<p>\n    Transport provides a very simple API for creating a single source of truth for state inside your app.\n</p>\n\n<p>\n    The store API has no dependencies on other frameworks. The design was lifted from <a href=\"http://www.ehcache.org/\" target=\"_blank\">EHCache</a>,\n    a well known, supported and widely used industry standard cache platform for Java.\n</p>\n<p>\n    You can create as many different stores as you like, each store should ideally contain a single type of object\n    mixing objects types in a store is generally a bad design. For each type of object you want to maintain state for, you would create a store for that\n    object. Once you have created a store, you can populate it with an existing single object collection of objects.\n</p>\n<p>\n    The store you create is essentially a hash map of key's to values. When you put an object into your store, you give it a unique key (which is a string\n    you define). Once an object is in the store, every and any actor inside your application can pull that specific object (or all objects) from that\n    store as there is only a single instance of the store inside your application. There is no defined limit to the\n    number of stores you can create and the number of objects you can keep in that store.\n</p>\n\n<hr/>\n<h2>Creating Stores</h2>\n\n<p>\n    Every class that extends from <code class=\"clr-code\">AbstractBase</code> or <code\n    class=\"clr-code\">AbstractCore</code> will receive a reference to <code class=\"clr-code\">this.storeManager</code>.\n    This object has has a type of\n    <code class=\"clr-code\"><a href=\"https://github.com/vmware/transport-typescript/blob/master/src/store.api.ts\">BusStoreApi</a></code>.\n</p>\n<p>\n    In order to create a store, you can use the method\n    <code class=\"clr-code\">this.storeManager.createStore(objectType: StoreType, map?: Map&lt;UUID, T&gt;)</code>.\n    The only mandatory argument is the 'type' of the store (<code class=\"clr-code\">StoreType</code>) which is actually\n    just a string. The second argument allows you to pass a pre-populated map to the store that will populate it with\n    all the key / values of the supplied map.\n</p>\n\n<h3>Creating 'MyObject' Store</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>interface MyObject &#123;\n    message: string\n&#125;\n\n// create a store called 'MyObject' that holds instances of MyObject\nconst myStore: BusStore&lt;MyObject&gt; = this.storeManager.createStore&lt;MyObject&gt;('MyObject');</code></pre>\n\n<p>\n    You have just created an empty store that is named 'MyObject' that is now supposed to hold objects of type <code class=\"clr-code\">MyObject</code>. <strong>You can only create a store once</strong>, it exists as a singleton.\n    If you make another call to create a store with the same name/object type definition - you will receive a reference to the same (already created and existing store).\n</p>\n\n<p>\n    <code class=\"clr-code\">this.storeManager.createStore()</code> is safe to use always to gain a reference to your store, it won't re-create it, if it already exists.\n</p>\n\n<hr/>\n\n<h2>Populating Stores</h2>\n\n<p>\n    When you create a store, you can pass a map containing all your key/value pairs. This will instantly create,\n    populate and activate the store. However if you would like to perform this operation later on, you can do so by\n    calling the <code class=\"clr-code\">populateStore()</code> method and passing in your values.\n</p>\n<p>\n    When you use <code class=\"clr-code\">myStore.populateStore(Map&lt;K,V&gt;)</code>, your store will be marked as initialized. When a\n    store is initialized, any actor inside your application that is waiting\n    for that store to be ready (see below), will be notified and receive updates on any objects they are interested in.\n</p>\n\n<h3>Populating 'MyObject' Store</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Populate store with initial state\nconst initialData: Map&lt;string, MyObject&gt; = new Map();\ninitialData.put('123', &#123; message: 'pretty' &#125;);\ninitialData.put('456', &#123; message: 'kitty' &#125;);\n\nmyStore.populateStore(initData);</code></pre>\n\n<hr/>\n\n<h2>Creating, Reading, Updating and Deleting objects from a Store</h2>\n<p>\n    Once you have a reference to a store, you can easily add, update and remove items\n    from that store using the <code class=\"clr-code\">put(), get()</code> and <code class=\"clr-code\">remove()</code>\n    methods on that store.\n</p>\n\n<p>\n    One of the concepts to know about the store is that it uses a 'bring your own state change types' model, Batteries not included here.\n    This means you can define your own state changes, beyond CRUD style events (if you want)\n</p>\n\n\n<h3>Adding and removing stuff from 'MyObject' Store</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// define our own state changes\nenum MyObjectState &#123;\n    Added,\n    Changed,\n    Sleeping\n&#125;\n\n// add new object\nmyStore.put('789', &#123; message: 'happy' &#125;, MyObjectState.Added);\n\n// replace object\nmyStore.put('789', &#123; message: 'puppy' &#125;, MyObjectState.Changed);\n\n// delete object\nmyStore.remove('789', MyObjectState.Sleeping);</code></pre>\n\n\n<h3>Getting stuff from 'MyObject' Store</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Get single objects from store\nconst myObject_123: MyObject = myStore.get('123');\nconst myObject_456: MyObject = myStore.get('456');\n\n// get all objects from store\nconst myObjects: Array&lt;MyObject&gt; = myStore.allValues();\n\n// get all objects from a store as a map.\nconst myObjectsMap: Map&lt;string, MyObject&lt; = myStore.allValuesAsMap();</code></pre>\n\n<hr/>\n<a routerLink=\"/ts/store-advanced\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Store Advanced Use</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-calling-services',\n  templateUrl: './calling-services.component.html',\n  styleUrls: ['./calling-services.component.scss']\n})\nexport class CallingServicesComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('CallingServicesComponent')\n    }\npublic highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n\n","<h1>Calling Message Based Services.</h1>\n<p>\n    In order to call <code class=\"clr-code\">PongService</code> from a component, we just need to make a request over the\n    <code class=\"clr-code\">PongService</code> channel\n    and handle the response. In this example, we're going to use a 'broadcast' mechanism. This is explained in more\n    detail below, but in a nutshell - it means that\n    it's an open conversation between the component and the service.\n</p>\n<p>\n    This means any other component listening for\n    responses on <code class=\"clr-code\">PongService</code>\n    would also receive that response. This can be useful if you want a bunch of different components to update, every\n    time a request for a list of something is requested (however\n    it would be a better design to use the store for this usecase).\n</p>\n\n<p>Lets create a simple component called <code class=\"clr-code\">PingComponent</code></p>\n\n<h3>Angular PingComponent</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; AbstractBase &#125; from '@vmw/transport/core';\nimport &#123; Component &#125; from '@angular/core';\nimport &#123; PongRequestType, PongServiceChannel, PongServiceRequest, PongServiceResponse &#125; from './pong.service.model';\nimport &#123; GeneralUtil &#125; from '@vmw/transport/util/util';\n\n@Component(&#123;\n    selector: 'ping-component',\n    template: `\n        &lt;button &#40;click&#41;=\"sendPingBasic()\"&gt;Ping (Basic)&lt;/button&gt;\n        &lt;button &#40;click&#41;=\"sendPingFull()\"&gt;Ping (Full)&lt;/button&gt;\n        Response: &#123;&#123;response&#125;&#125;`\n&#125;)\nexport class PingComponent extends AbstractBase &#123;\n\n    public response = 'nothing yet, request something!';\n\n    constructor() &#123;\n        super('PingComponent');\n    &#125;\n\n    /**\n     * Send a basic ping request to the pong service.\n     */\n    public sendPingBasic(): void &#123;\n\n        const request = this.fabric.generateFabricRequest(PongRequestType.Basic, 'basic ping');\n        this.sendPingRequest(request);\n\n    &#125;\n\n    /**\n     * Send a full ping request to the pong service.\n     */\n    public sendPingFull(): void &#123;\n\n        const request = this.fabric.generateFabricRequest(PongRequestType.Full, 'full ping');\n        this.sendPingRequest(request);\n\n    &#125;\n\n    private sendPingRequest(request: PongServiceRequest): void &#123;\n         this.bus.requestOnceWithId(GeneralUtil.genUUIDShort(), PongServiceChannel, request)\n            .handle(\n                (response: PongServiceResponse) => &#123;\n                    this.response = response.payload;\n                &#125;\n            );\n    &#125;\n&#125;</code></pre>\n\n<p>\n    Now that we have our <code class=\"clr-code\">PingComponent</code>, it should be able to call our <code class=\"clr-code\">PongService</code>.\n</p>\n\n<p>And a version using React:</p>\n\n<h3>React PingComponent</h3>\n<pre class=\"code\">\n<code class=\"language-typescript\" ngNonBindable>\nimport React, &#123; useState &#125; from 'react';\nimport &#123; useTransport &#125; from 'react-Transport';\nimport &#123; PongRequestType, PongServiceChannel, PongServiceRequest, PongServiceResponse &#125; from 'pong.service.model';\nimport &#123; GeneralUtil &#125; from '@vmw/transport/util/util';\n\nexport default function PingComponent() &#123;\n\n    const transport = useTransport();\n    const [ pingResponse, setPingResponse ] = useState&#60;string&#62;('nothing yet, hit a button');\n\n    function sendPingBasic()  &#123;\n        sendPingRequest(transport.fabric.generateFabricRequest(PongRequestType.Basic, 'basic ping'));\n     &#125;\n\n    function sendPingFull()  &#123;\n        sendPingRequest(transport.fabric.generateFabricRequest(PongRequestType.Full, 'full ping'));\n    &#125;\n\n    function sendPingRequest(request: PongServiceRequest) &#123;\n        transport.bus.requestOnceWithId(GeneralUtil.genUUIDShort(), PongServiceChannel, request)\n            .handle(\n                (response: PongServiceResponse) =&#62; &#123;\n                    setPingResponse(response.payload);\n                &#125;\n            );\n    &#125;\n\n    return (\n        &#60;div&#62;\n            &#60;button onClick=&#123;() =&#62; sendPingBasic()&#125; className='btn btn-primary'&#62;Ping (Basic)&#60;/button&#62;\n            &#60;button onClick=&#123;() =&#62; sendPingFull()&#125; className='btn btn-primary'&#62;Ping (Full)&#60;/button&#62;\n            &#60;br/&#62;\n            Response: &#123;pingResponse&#125;\n        &#60;/div&#62;\n    );\n&#125;\n</code>\n</pre>\n\n<p>\n    The actual code that sends the request to the service, and handles the response sent back is handled by the <code\n    class=\"clr-code\">sendPingRequest()</code> method on the component.\n</p>\n<p>\n    The method used in here <code class=\"clr-code\">this.bus.requestOnceWithId()</code> essentially takes in the channel you\n    want to send your payload on, and the actual payload. This method\n    returns what is known as a <code class=\"clr-code\">MessageHandler</code> interface. In this example we use the <code\n    class=\"clr-code\">handle()</code> method to pass in\n    a lambda that is executed once the response is provided by the service.\n</p>\n<p>\n    The ID is used to ensure this the response we get back, is a response to my request only. Channels are public\n    so in order to have 1-1 communication, you need to use the bus methods with ID's.\n</p>\n<p>\n    The <code class=\"clr-code\">handle()</code>\n    method also accepts an error lambda. This is executed if the service\n    returns an error of some kind. In fact this is the exact same API signature used by <strong>RxJS</strong> (which is\n    what we used at the core of the event bus).\n</p>\n<p>\n    One of the key benefits to using the bus, is that unlike RxJS, when an error is thrown on a stream, the stream\n    <strong>remains open</strong>. You don't have to worry about managing\n    the subscription to that stream if something goes wrong.\n</p>\n\n<p>\n    This example uses <code class=\"clr-code\">requestOnce()</code> which means a single request is sent and a single\n    response is handled. However there are quite a few other methods\n    available that will send a request and listen for multiple responses (<code class=\"clr-code\">requestStream()</code>)\n    Or you could avoid sending a request altogether and just\n    listen for responses (<code class=\"clr-code\">listenStream()</code>).\n</p>\n<p>\n    To find out more about the available API's,\n    You can <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/bus.api.ts\" target=\"_blank\">take a\n    look at the API here</a>\n</p>\n<hr/>\n<a routerLink=\"/ts/advanced-messaging\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Advanced Messaging</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-building-services',\n  templateUrl: './building-services.component.html',\n  styleUrls: ['./building-services.component.scss']\n})\nexport class BuildingServicesComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('BuildingServicesComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n\n","<h1>Building Message Based Services</h1>\n\n<p>\n    You're free to build applications however you want, however this is a pattern we use frequently. We combine this pattern with auto-generation, so that we don't need to build\n    this code out each time - it's driven by OpenAPI specifications (if API driven).\n</p>\n<hr/>\n<h3>Using <code class=\"clr-code\">AbstractService</code></h3>\n\n<h3>Example </h3>\n\n<p>\n    To get started, we should create a new class called <code\n    class=\"clr-code\">PongService</code> in a folder named <code class=\"clr-code\">services</code>\n    that sits off the root of your <code class=\"clr-code\">src/</code> folder. Your path should be <code\n    class=\"clr-code\">~/my-app-folder/src/services</code>\n</p>\n<p>\n    The first thing we need to do in order to create our first simple <code class=\"clr-code\">PongService</code> is\n    create a <code class=\"clr-code\">PongServiceRequest</code> model and a\n    <code class=\"clr-code\">PongServiceResponse</code> model. These two models are responsible for allowing other actors\n    to know what to send to our service, and what to expect in response.\n</p>\n<p>\n    In the <code class=\"clr-code\">services/</code> folder, we will create a new file called <code class=\"clr-code\">pong.service.model.ts</code>.\n    This is our request/response model that defines\n    what our <code class=\"clr-code\">PongService</code> listens for and responds with.\n</p>\n\n<h3>Create Service Request/Response Models.</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; ChannelName &#125; from '@vmw/transport';\nimport &#123; AbstractMessageObject &#125; from '@vmw/transport/core';\n\nexport const PongServiceChannel: ChannelName = 'services-PongService';\n\nexport enum PongRequestType &#123;\n    Basic = 'Basic',\n    Full = 'Full'\n&#125;\n\nexport interface PongServiceRequest extends AbstractMessageObject&lt;PongRequestType, string&gt; &#123;\n    request: PongRequestType;\n    payload: string;\n&#125;\n\nexport interface PongServiceResponse extends AbstractMessageObject&lt;PongRequestType, string&gt; &#123;\n    payload: string;\n&#125;</code></pre>\n\n<p>\n    Pretty simple right? We have defined a channel on which to talk, an enum to define the command we want to send and\n    then two simple interfaces that define request and responses.\n    You're not restricted to interfaces here, you can also use classes. The important thing to remember here is that\n    this is <strong>*ALL*</strong> that is required in order to\n    talk to our new <code class=\"clr-code\">PongService</code>.\n</p>\n\n<p>\n    The reason why we extend from <code class=\"clr-code\">AbstractMessageObject</code> is because is provides some important properties\n    that we will need when making Fabric calls across the distributed bus.\n</p>\n\n<p>\n    Next, lets create our actual <code class=\"clr-code\">PongService</code>. It looks like this:\n</p>\n\n<hr/>\n\n<h3>PongService</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; AbstractService &#125; from '@vmw/transport/core';\nimport &#123; EventBus, MessageArgs &#125; from '@vmw/transport';\nimport &#123;\n    PongRequestType,\n    PongServiceChannel,\n    PongServiceRequest,\n    PongServiceResponse\n&#125; from './pong.service.model';\n\nexport class PongService extends AbstractService&lt;PongServiceRequest, PongServiceResponse&gt; &#123;\n\n    constructor() &#123;\n\n        // identify the name of this service, and the channel it operates on.\n        super('PongService', PongServiceChannel);\n\n        // log that the service is online (if logging enabled)\n        this.log.info('PongService Loaded');\n    &#125;\n\n    /**\n     * Handle a request send on the service channel.\n     * @param serviceRequest the request object\n     * @param args automatically passed by superclass, important details within.\n     */\n    protected handleServiceRequest(serviceRequest: PongServiceRequest, args?: MessageArgs): void &#123;\n\n        switch (serviceRequest.request) &#123;\n            case PongRequestType.Basic:\n                this.handleBasicRequest(request.payload, args);\n                break;\n\n            case PongRequestType.Full:\n                this.handleFullRequest(request.payload, args);\n                break;\n        &#125;\n    &#125;\n\n    /**\n     * Handle a basic request (limited details)\n     * @param message this is the message sent by the requesting actor.\n     * @param args these are important values that identify who sent the request.\n     */\n    private handleBasicRequest(message: string, args: MessageArgs): void &#123;\n\n        const basicResponse = &#123;\n            value: `pong '$&#123;message&#125;'`\n        &#125;;\n\n        // send a response to whomever requested it.\n        this.postResponse(PongServiceChannel, basicResponse, args);\n    &#125;\n\n    /**\n     * Handle a more detailed response (more details)\n     * @param message this is the message sent by the requesting actor.\n     * @param args these are important values that identify who sent the request.\n     */\n    private handleFullRequest(message: string, args: MessageArgs): void &#123;\n\n        // get a timestamp.\n        const date = new Date();\n        const dateString = date.toLocaleDateString('en-US');\n        const perf = performance.now();\n\n        const basicResponse = &#123;\n            value: `pong '$&#123;message&#125;' (on $&#123;date&#125; by event bus with id $&#123;EventBus.id&#125;) time: $&#123;perf&#125;`\n        &#125;;\n\n        // send a response to whomever requested it.\n        this.postResponse(PongServiceChannel, basicResponse, args);\n\n    &#125;\n&#125;</code></pre>\n<p>\n    Now we can load <code class=\"clr-code\">PongService</code> whenever we like.\n</p>\n\n<hr/>\n\n<h3 id=\"loadingservice\">Loading Services</h3>\n\n<p>\n    To load a service you can use the in-built static <code class=\"clr-code\">ServiceLoader</code>\n    utility. The <code class=\"clr-code\">ServiceLoader</code> takes the service class type as the first argument, and\n    then as many other constructor properties as you need for your service (variable args). In this example, we could load our\n    service at the same time we boot the bus (i.e. before Angular even loads).\n</p>\n<p>\n    We could also load the service on demand when it's required, by loading the service as a part of a module definition.\n    It's really up to you. The general rule is that a global service, should be ready before your application boots, other services can be booted on demand.\n</p>\n<p>\n    How do I boot <code class=\"clr-code\">PongService</code>? Easy. Just pass your class to <code class=\"clr-code\">ServiceLoader</code>.\n    Just like this:\n</p>\n\n<h3>Using ServiceLoader</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; ServiceLoader &#125; from '@vmw/transport/util/service.loader';\n\nServiceLoader.addService(PongService);</code></pre>\n\n<p>\n    If you want to create a service that accepts constructor arguments, and you want to pass them to the service loader? You can just add your constructor args\n    to the  <code class=\"clr-code\">AddService</code> method.\n</p>\n\n<h3>Using ServiceLoader with constructor args</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>...\n    constructor(arg1, arg2, arg3) &#123;\n...\n\nServiceLoader.addService(PongService, arg1, arg2, arg3);</code></pre>\n\n<p>\n    Once the service has loaded, you should see some output in the developer console, that looks something like...\n</p>\n<pre class=\"log-output\">▫️️<span class=\"console-purple\">[Inf]:</span> 🌎 <span class=\"console-pink\">Service Adaptor: PongService (3e4f3014) online and listening on 'services::PongService'</span> <span class=\"console-who\">[PongService]</span> <span class=\"console-time\">(9:25:39 AM)</span>\n▫️️<span class=\"console-purple\">[Inf]:</span> <span class=\"console-pink\">PongService Loaded</span>\n</pre>\n<hr/>\n<a routerLink=\"/ts/calling-services\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Calling Services</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {TypescriptComponent} from '@vmw/transport-docs/typescript/typescript.component';\nimport {OverviewComponent} from '@vmw/transport-docs/typescript/overview/overview.component';\nimport {ImportingComponent} from \"@vmw/transport-docs/typescript/importing/importing.component\";\nimport {InitializingComponent} from \"@vmw/transport-docs/typescript/initializing/initializing.component\";\nimport {HelloWorldComponent} from \"@vmw/transport-docs/typescript/hello-world/hello-world.component\";\nimport {BuildingServicesComponent} from \"@vmw/transport-docs/typescript/building-services/building-services.component\";\nimport {CallingServicesComponent} from \"@vmw/transport-docs/typescript/calling-services/calling-services.component\";\nimport {AdvancedMessagingComponent} from \"@vmw/transport-docs/typescript/advanced-messaging/advanced-messaging.component\";\nimport {TransactionsComponent} from \"@vmw/transport-docs/typescript/transactions/transactions.component\";\nimport {LoggingComponent} from \"@vmw/transport-docs/typescript/logging/logging.component\";\nimport {BrokerOverviewComponent} from \"@vmw/transport-docs/typescript/broker-overview/broker-overview.component\";\nimport {ConnectingBrokerComponent} from \"@vmw/transport-docs/typescript/connecting-broker/connecting-broker.component\";\nimport {MultipleBrokersComponent} from \"@vmw/transport-docs/typescript/multiple-brokers/multiple-brokers.component\";\nimport {ExtendingChannelsComponent} from \"@vmw/transport-docs/typescript/extending-channels/extending-channels.component\";\nimport {StoreBasicsComponent} from \"@vmw/transport-docs/typescript/store-basics/store-basics.component\";\nimport {StoreAdvancedComponent} from \"@vmw/transport-docs/typescript/store-advanced/store-advanced.component\";\nimport {IframesComponent} from \"@vmw/transport-docs/typescript/iframes/iframes.component\";\nimport {AbstractionsComponent} from \"@vmw/transport-docs/typescript/abstractions/abstractions.component\";\nimport {ImportingAngularComponent} from \"@vmw/transport-docs/typescript/importing-angular/importing-angular.component\";\nimport {ImportingReactComponent} from \"@vmw/transport-docs/typescript/importing-react/importing-react.component\";\nimport {ImportingUmdComponent} from \"@vmw/transport-docs/typescript/importing-umd/importing-umd.component\";\nimport {PingPongComponent} from \"@vmw/transport-docs/typescript/examples/ping-pong/ping-pong.component\";\nimport {StockTickerComponent} from \"@vmw/transport-docs/typescript/examples/stock-ticker/stock-ticker.component\";\nimport {SimpleStreamComponent} from \"@vmw/transport-docs/typescript/examples/simple-stream/simple-stream.component\";\nimport {JokeComponent} from \"@vmw/transport-docs/typescript/examples/joke/joke.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TypescriptComponent,\n        children: [\n            {path: '', component: OverviewComponent},\n            {path: 'overview', component: OverviewComponent},\n            {path: 'importing', component: ImportingComponent},\n            {path: 'importing-angular', component: ImportingAngularComponent},\n            {path: 'importing-umd', component: ImportingUmdComponent},\n            {path: 'importing-react', component: ImportingReactComponent},\n            {path: 'initializing', component: InitializingComponent},\n            {path: 'hello-world', component: HelloWorldComponent},\n            {path: 'building-services', component: BuildingServicesComponent},\n            {path: 'calling-services', component: CallingServicesComponent},\n            {path: 'advanced-messaging', component: AdvancedMessagingComponent},\n            {path: 'transactions', component: TransactionsComponent},\n            {path: 'logging', component: LoggingComponent},\n            {path: 'broker-overview', component: BrokerOverviewComponent},\n            {path: 'connecting-broker', component: ConnectingBrokerComponent},\n            {path: 'multiple-brokers', component: MultipleBrokersComponent},\n            {path: 'extending-channels', component: ExtendingChannelsComponent},\n            {path: 'store-basics', component: StoreBasicsComponent},\n            {path: 'store-advanced', component: StoreAdvancedComponent},\n            {path: 'iframes', component: IframesComponent},\n            {path: 'abstractions', component: AbstractionsComponent},\n            {path: 'examples', component: PingPongComponent},\n            {path: 'examples/ping-pong', component: PingPongComponent},\n            {path: 'examples/stock-ticker', component: StockTickerComponent},\n            {path: 'examples/simple-stream', component: SimpleStreamComponent},\n            {path: 'examples/joke-service', component: JokeComponent},\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class TypescriptRoutingModule {\n}\n","import {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-importing-react',\n  templateUrl: './importing-react.component.html',\n  styleUrls: ['./importing-react.component.scss']\n})\nexport class ImportingReactComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {}\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Importing Transport for TypeScript into React Applications</h1>\n\n<p>\n    Make sure you install transport first. Package is available via npm.\n</p>\n<br/>\n<transport-animated-console [inputCommand]=\"'npm install @vmw/transport --save'\"\n                            [consoleTheme]=\"'macOS'\"\n                            [loopAnimation]=\"false\"\n                            [disableAnimation]=\"true\">\n</transport-animated-console>\n\n<hr/>\n<h2></h2>\n\n<p>\n    React is really simple, it's as simple as <a routerLink=\"../importing\">importing ES6</a>.\n</p>\n<pre class=\"code\"><code class=\"language-js\">import React, &#123; Component &#125; from 'react';\nimport &#123; render &#125; from 'react-dom';\nimport &#123; BusUtil &#125; from '@vmw/transport/util/bus.util';\n\ninterface AppProps &#123;&#125;\ninterface AppState &#123;\n    id: string;\n&#125;\n\nclass App extends Component&lt;AppProps, AppState&gt; &#123;\n    constructor(props) &#123;\n    super(props);\n\n    // boot the bus\n    BusUtil.bootBus();\n\n    // capture instance of the bus.\n    const bus = BusUtil.getBusInstance();\n\n    // set state.\n    this.state = &#123;\n        id: bus.api.getId()\n    &#125;;\n  &#125;\n\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;Hello id=&#123;this.state.id&#125; /=&gt;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\nrender(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>\n\n\n<h4><a href=\"https://stackblitz.com/edit/react-ts-zfats4?file=index.tsx\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/react-ts-zfats4?ctl=1&embed=1&file=index.tsx\" class=\"stackblitz\"></iframe>\n<hr/>\n\n\n<h2>Using a Provider to access Transport</h2>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import React, &#123; useContext &#125; from 'react';\nimport &#123; AbstractCore &#125; from '@vmw/transport/core';\n\nexport class Transport extends AbstractCore &#123;&#125;\nexport const TransportContext = React.createContext&lt;any&gt;(null);\n\ninterface ProviderProps extends React.Props &#123;\n    transport: Transport;\n&#125;\n\nexport const Provider: React.FC&lt;ProviderProps&gt; = props => (\n  &lt;TransportContext.Provider value=&#123;props.transport&#125;&gt;\n    &#123;props.children&#125;\n  &lt;/TransportContext.Provider&gt;\n);\n\nexport const useTransport = () => useContext(TransportContext);\n</code></pre>\n\n<hr/>\n<h2>Using a Base Component Class to provide access to Transport</h2>\n\n<p>\n    Some of us are a little old fashioned and prefer to use Classes and inheritance in our design, rather than using\n    side effects and useState etc. You could use this very simple base component as your root component and extend from here.\n</p>\n\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; EventBus, BusStoreApi &#125; from \"@vmw/transport/bus.api\";\nimport &#123; FabricApi &#125; from \"@vmw/transport/fabric.api\";\nimport &#123; Logger &#125; from \"@vmw/transport/log\";\nimport &#123; BusUtil &#125; from \"@vmw/transport/util/bus.util\";\nimport React from \"react\";\n\nexport abstract class BaseComponent&lt;P = any, S = any&gt; extends React.Component&lt;P, S&gt; &#123;\n    // get a reference to the bus, fabric and logger\n    public bus: EventBus = BusUtil.getBusInstance();\n    public fabric: FabricApi = this.bus.fabric;\n    public log: Logger = this.bus.logger;\n    public storeManager: BusStoreApi = this.bus.stores;\n&#125;</code></pre>\n\n<p>\n    This provides you with everything you need to use transport effectively in your React Components.\n</p>\n\n<hr/>\n\n<a routerLink=\"/ts/initializing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Initializing Transport</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-logging',\n  templateUrl: './logging.component.html',\n  styleUrls: ['./logging.component.scss']\n})\nexport class LoggingComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('TransactionsComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Logging</h1>\n<h3>\n    >> Please don't use <code class=\"clr-code\">console.log()</code> <<\n</h3>\n<p>\n    When using any of the abstractions provided, they all extend from a single base class called <code class=\"clr-code\">AbstractCore</code>.\n    A key property provided is <code class=\"clr-code\">this.log</code>, which is a\n    reference to a global singleton logger of type <code class=\"clr-code\">Logger</code>. You can read the API here: <a\n    href=\"https://github.com/vmware/transport-typescript/blob/master/src/log/logger.service.ts\">\n    https://github.com/vmware/transport-typescript/blob/master/src/log/logger.service.ts</a>.\n\n</p>\n<p>\n    This follows standard\n    logging design that allows you to configure the logging level, styling and also log messages to the console\n    with varying levels. Currently the logger supports <code class=\"clr-code\">VERBOSE, DEBUG, INFO, WARN, ERROR</code>\n    levels.\n</p>\n\n<p>\n    To log to the console, all you need (from any class implementing an abstraction) is call <code class=\"clr-code\">this.log</code>,\n    and then the level you want to log at. For example (<code class=\"clr-code\">verbose(obj), debug(obj), info(obj),\n    warn(obj), error(ob)</code>.\n    Below is an example of all the log level methods being called.\n</p>\n\n<h4>Logging Level Example</h4>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; AbstractBase &#125; from '@vmw/transport/core';\nimport &#123; LogLevel &#125; from '@vmw/transport/log';\nimport &#123; Component &#125; from '@angular/core';\n\n@Component(&#123;\n    selector: 'log-component',\n    template: `\n        &lt;button (click)=\"logMessages()\"&gt;Log To Console&lt;/button&gt;`\n&#125;)\nexport class LogComponent extends AbstractBase &#123;\n\n    constructor() &#123;\n        super('LogComponent');\n\n        // turn on verbose logging for our bus.\n        this.bus.api.setLogLevel(LogLevel.Verbose);\n    &#125;\n\n    /**\n     * Log messages to the console.\n     */\n    public logMessages(): void &#123;\n        this.log.verbose('this is a Verbose log message');\n        this.log.debug('this is a Debug log message');\n        this.log.info('this is an Info log message');\n        this.log.warn('this is a Warn log message');\n        this.log.error('this is an Error log message');\n    &#125;\n&#125;</code></pre>\n\n<p>\n    Which should output the following in your developer tools console. (FYI, WARN and ERROR messages will provide a\n    stack trace also).\n</p>\n\n\n<pre class=\"log-output\">📍️️️ <span class=\"console-purple\">[Ver]:</span> <span class=\"console-pink\">This is a Verbose log message</span>\n🔸️ <span class=\"console-purple\">[Deb]:</span> <span class=\"console-pink\">This is a Debug log message</span>\n▫️ <span class=\"console-purple\">[Inf]:</span> <span class=\"console-pink\">This is an Info log message</span>\n⚠️ <span class=\"console-orange\">[Warn]:</span>  <span class=\"console-orange\">This is a Warn log message</span>\n🔴 <span class=\"console-red\">[Error]:</span> <span class=\"console-red\">This is an Error log message</span>\n</pre>\n\n<p>\n    Open the developer console to see logging output.\n</p>\n<hr/>\n<a routerLink=\"/ts/broker-overview\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Extending To A Broker Overview</a>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from '@vmw/transport-docs/services/highlight.service';\n\n@Component({\n    selector: 'transport-initializing',\n    templateUrl: './initializing.component.html',\n    styleUrls: ['./initializing.component.scss']\n})\nexport class InitializingComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1 id=\"initializing\">\n    Initializing Transport\n</h1>\n\n<p>\n    Transport operates outside of any vendor UI technology framework. It's completely decoupled, allowing it to be\n    used by any framework. Because it's independent, it needs to be initialized before any other frameworks have booted or started e.g. Angular.\n</p>\n<p>\n    There are a couple of ways to do this, the first is to create an initialization script that is auto-loaded into the\n    <code class=\"clr-code\">&lt;head/&gt;</code> of the DOM and would therefore boot before the UI framework does. This\n    init/boot script serves as a great spot to set up and configure all your fabric needs.\n</p>\n<h3>Booting via init script</h3>\n<p>\n    The simplest and quickest way to initialize the bus is in this init script, you just need a single line of code.\n</p>\n<h4 class=\"orange\">Simplest Way</h4>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; BusUtil &#125; from '@vmw/transport/util/bus.util';\n\n// initializing transport (event bus)\nconst bus = BusUtil.bootBus();\n</code></pre>\n\n<h4 class=\"orange\">Using Options</h4>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; BusUtil &#125; from '@vmw/transport/util/bus.util';\n\n// initializing transport, with debug logging enabled, and the boot message is not disabled.\nconst bus = BusUtil.bootBusWithOptions(LogLevel.Debug, false);\n</code></pre>\n\n<p>\n    Transport is now active and ready to be be used. It operates as a singleton inside your application. You don't\n    need to hold on to your reference here, the bus is attached to the  <code class=\"clr-code\">window</code> object and won't\n    be lost.\n</p>\n\n\n\n<hr/>\n\n<h2>\n    Access to Transport in your app.\n</h2>\n\n<p>\n    There are two main ways to gain access to the singleton instance of transport in your app.\n</p>\n\n\n\n<div class=\"clr-row\">\n    <div class=\"clr-col-lg-6\">\n        <div class=\"card\">\n            <div class=\"card-header\">\n                Using <code class=\"clr-code\">window.AppEventBus</code>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"card-text\">\n                    Transport is added to your <code class=\"clr-code\">window</code> object under the property\n                    <code class=\"clr-code\">AppEventBus</code>.\n                    <br/>\n                    This is most useful for non-TypeScript applications. Applications using vanilla JavaScript would use this method.\n\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"clr-col-lg-6\">\n        <div class=\"card\">\n            <div class=\"card-header\">\n                Using built in <a routerLink=\"../abstractions\">Abstract Classes</a>\n            </div>\n            <div class=\"card-block\">\n                <div class=\"card-text\">\n                    We created a few simple <a routerLink=\"../abstractions\">abstract base classes</a> that prepare everything for you. This is the\n                    easiest and cleanest way if you're using TypeScript.\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<p>\n    You can find out about some of the other methods available by looking at the <code class=\"clr-code\">BusUtil</code>\n    API, you can find the code here:\n    <a href=\"https://github.com/vmware/transport-typescript/blob/master/src/util/bus.util.ts\" target=\"_blank\">https://github.com/vmware/transport-typescript/blob/master/src/util/bus.util.ts</a>\n</p>\n<hr/>\n<a routerLink=\"/ts/hello-world\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Hello World</a>\n\n\n\n\n\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {Component, OnInit} from '@angular/core';\nimport {BaseComponent} from \"@vmw/transport-docs/base.component\";\nimport {TermCommand} from \"@vmw/transport-docs/welcome/welcome.component\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\nimport {tsTerminalCommands} from \"@vmw/transport-docs/shared/model\";\n\n@Component({\n    selector: 'transport-ts-overview',\n    templateUrl: './overview.component.html',\n    styleUrls: ['./overview.component.scss']\n})\nexport class OverviewComponent extends BaseComponent implements OnInit {\n\n    public tsCommands: Array<TermCommand>;\n    public highlighted = false;\n\n    constructor(private highlightService: HighlightService) {\n        super('OverviewComponent');\n    }\n\n    highlight() {\n        this.highlightService.highlightAll();\n    }\n\n    ngOnInit(): void {\n        this.tsCommands = tsTerminalCommands;\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n\n","<h1>Transport for TypeScript</h1>\n\n<img src=\"assets/github.png\" alt=\"github\" title=\"transport on github\" class=\"github-logo\"/>\n<a href=\"https://github.com/vmware/transport-typescript\">View TypeScript source on Github</a>\n\n<p>\n    This implementation is designed to operate in the Browser (for right now anyway). However it is <strong>framework agnostic</strong>,\n    and will work along-side any UI framework you want to implement.\n</p>\n<p>\n    Transport does not care which framework you would like to run. It's directly accessible from the <code>window</code>\n    object, if you don't even want to use a framework. We're using examples from Angular and React in places, however\n    the same principals would apply in any framework.\n</p>\n\n\n<section *ngFor=\"let cmd of tsCommands; index as i\">\n    <h4 class=\"code-step\">{{cmd.title}}</h4>\n    <transport-animated-console [inputCommand]=\"cmd.command\"\n                                [helperTxt]=\"cmd.notes\"\n                                [consoleTheme]=\"'macOS'\"\n                                [loopAnimation]=\"false\"\n                                [delay]=\"i * 1000\">\n    </transport-animated-console>\n</section>\n\n\n<hr/>\n<a routerLink=\"/ts/importing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Importing Transport</a>\n<hr/>\n\n\n","import {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n    selector: 'transport-importing-angular',\n    templateUrl: './importing-angular.component.html',\n    styleUrls: ['./importing-angular.component.scss']\n})\nexport class ImportingAngularComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Importing Transport for TypeScript into Angular Applications</h1>\n\n<p>\n    Make sure you install transport first. Package is available via npm.\n</p>\n<br/>\n<transport-animated-console [inputCommand]=\"'npm install @vmw/transport --save'\"\n                            [consoleTheme]=\"'macOS'\"\n                            [loopAnimation]=\"false\"\n                            [disableAnimation]=\"true\">\n</transport-animated-console>\n\n<hr/>\n<h2></h2>\n\n<p>\n    Angular provides <code class=\"clr-code\">angular.json</code> (for Angular 7+) and <code class=\"clr-code\">angular-cli.json</code>\n    (for Angular 4-5).\n</p>\n\n<h4>Configuring <code class=\"clr-code\">angular.json</code></h4>\n\n<p>\n    You need to add <code class=\"clr-code\">@vmw/transport</code> to the <code class=\"clr-code\">allowedCommonJsDependencies</code>\n    option that is a part of <code class=\"clr-code\">architect/build/options</code> property in your <code class=\"clr-code\">angular.json</code>\n</p>\n\n\n<pre class=\"code\"><code class=\"language-json\" ngNonBindable>...\n \"allowedCommonJsDependencies\": [\"@vmw/transport\"],\n...</code></pre>\n\n\n\n<p>\n    Your application is ready to go, now you just need to boot transport\n</p>\n<p>\n    Angular provides a  <code class=\"clr-code\">src/main.ts</code> file, which is essentially your initialization script, that\n    you can use to <a routerLink=\"../initializing\">Initialize the Bus.</a>\n</p>\n\n<pre class=\"code\"><code class=\"language-js\">import &#123;BusUtil&#125; from \"@vmw/transport/util/bus.util\";\nimport &#123;LogLevel&#125; from \"@vmw/transport/log\";\n\nBusUtil.bootBus();\n</code></pre>\n\n\n<h4><a href=\"https://stackblitz.com/edit/angular-jxca5i\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/angular-jxca5i?ctl=1&embed=1&file=src/main.ts\" class=\"stackblitz\"></iframe>\n<hr/>\n<a routerLink=\"/ts/initializing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Initializing Transport</a>\n\n","import {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n    selector: 'transport-importing-umd',\n    templateUrl: './importing-umd.component.html',\n    styleUrls: ['./importing-umd.component.scss']\n})\nexport class ImportingUmdComponent implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n\n        }\n    }\n}\n","<h1>Importing Transport for TypeScript via UMD</h1>\n\n<p>\n    Make sure you install transport first, Package is available via npm.\n</p>\n<br/>\n<transport-animated-console [inputCommand]=\"'npm install @vmw/transport --save'\"\n                            [consoleTheme]=\"'macOS'\"\n                            [loopAnimation]=\"false\"\n                            [disableAnimation]=\"true\">\n</transport-animated-console>\n\n<hr/>\n<h2>UMD module import through the HTML <code class=\"clr-code\">&lt;script&gt;</code> tag</h2>\n\n<p>\n    If you would like to use Transport in a simple setup, say an HTML with WebComponents in it, you can import the UMD\n    version of the library via a script tag. Note that RxJS is the only prerequisite for Transport so make sure to import it first.\n</p>\n\n<pre class=\"code\"><code class=\"language-js\" ngNonBindable>&lt;script src=\"https://cdn.jsdelivr.net/npm/rxjs@6.6.3/bundles/rxjs.umd.min.js\">&lt;/script&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/@vmw/transport@latest/transport.umd.min.js\">&lt;/script&gt;\n&lt;script&gt;\n    // boot the event bus!\n    transport.TransportEventBus.boot();\n&lt;/script&gt;\n</code></pre>\n\n<h4><a href=\"https://stackblitz.com/edit/js-yfdlde?file=index.html\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/js-yfdlde?ctl=1&embed=1&file=index.html&theme=dark\" class=\"stackblitz\"></iframe>\n\n<hr/>\n\n\n<hr/>\n<h2>Importing Transport in your code</h2>\n\n<p>\n    The main interface you will need is <code class=\"clr-code\">EventBus</code>. It provides access to the most common methods.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable> import &#123; EventBus &#125; from '@vmw/transport';</code></pre>\n\n<hr/>\n\n<a routerLink=\"/ts/initializing\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Initializing Transport</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n    selector: 'transport-connecting-broker',\n    templateUrl: './connecting-broker.component.html',\n    styleUrls: ['./connecting-broker.component.scss']\n})\nexport class ConnectingBrokerComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('ConnectingBrokerComponent')\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","\n<h3>Connecting to a broker</h3>\n\n<p>\n    If you're using the Java or Golang version of Transport, they both come with a local, very simple broker that you can run. However because Transport uses <a href=\"http://stomp.github.io/\" target=\"_blank\">STOMP</a>, it means\n    you can connect directly to any STOMP compatible broker (like RabbitMQ for example).\n</p>\n\n<h4>How do I connect my bus to a broker?</h4>\n\n<p>\n    We've tried to keep this as simple as possible. You should really just need to provide a connected and disconnected event handler.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Set up the bus, before we load any of the app.\nconst bus: EventBus = BusUtil.bootBus();\n\n// Called when connected to broker\nconst connectedHandler = (sessionId: string) => &#123;\n    bus.logger.info(`Connected to Broker with sessionId $&#123;sessionId&#125;`, 'main.ts');\n&#125;;\n\n// Called when disconnected.\nconst disconnectedHandler = () => &#123;\n    bus.logger.info('Disconnected from Broker.', 'main.ts');\n&#125;\n\n// Connect to Broker, this a real working end-point.\nbus.fabric.connect(connectedHandler, disconnectedHandler, 'transport-bus.io', 443, '/ws', true);\n</code></pre>\n\n<p>\n    If you need to configure the endpoint, host, port etc, you can also pass those in also as optional args.\n</p>\n<hr/>\n<p>\n    Disconnecting is easy, you'll go offline instantly.\n</p>\n\n<h4>Disconnecting from broker</h4>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Disconnect (close socket completely).\nbus.fabric.disconnect();</code></pre>\n\n<h4><a href=\"https://stackblitz.com/edit/angular-kk6cyh\">Try it out in StackBlitz</a></h4>\n<iframe src=\"https://stackblitz.com/edit/angular-kk6cyh?ctl=1&devtoolsheight=33&embed=1&file=src/app/app.component.ts&theme=dark\" class=\"stackblitz\"></iframe>\n\n\n<div class=\"alert alert-info\" role=\"alert\">\n    <div class=\"alert-items\">\n        <div class=\"alert-item static\">\n            <div class=\"alert-icon-wrapper\">\n                <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\n            </div>\n            <span class=\"alert-text\">\n                You can always use the built in abstractions that can give you\n                access to the <code class=\"clr-code\">bus</code> and <code class=\"clr-code\">fabric</code> and\n                <code class=\"clr-code\">storeManager</code> instances, without having to do anything.\n            </span>\n        </div>\n    </div>\n</div>\n\n\n\n<hr/>\n\n<h3>How does my application monitor the broker connection state?</h3>\n\n<p>\n    How do I know if my application gets knocked offline? What if there is a hiccup on the WebSocket? The <code class=\"clr-code\">this.fabric.whenConnectionStateChanges()</code>\n    returns a <code class=\"clr-code\">StoreStream&lt;FabricConnectionState&gt;</code> instance, that will stream connection state changes to the consumer.\n</p>\n<p>\n    There are three different state changes emitted from this stream.\n</p>\n<ol class=\"list\">\n    <li><code class=\"clr-code\">FabricConnectionState.Connected</code> - <span class=\"emphasis\">Broker connected!</span></li>\n    <li><code class=\"clr-code\">FabricConnectionState.Disconnected</code> - <span class=\"emphasis\">Broker disconnected!</span></li>\n    <li><code class=\"clr-code\">FabricConnectionState.Failed</code> - <span class=\"emphasis\">Broker unable to connect!</span></li>\n</ol>\n\n<h4>Using whenConnectionStateChanges()</h4>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; FabricApi, FabricConnectionState &#125; from '@vmw/transport/fabric.api';\n\nthis.fabric.whenConnectionStateChanges()\n    .subscribe(\n        (stateChange: FabricConnectionState) => &#123;\n            switch (stateChange) &#123;\n                case FabricConnectionState.Connected:\n                    // .. do something, now we're online.\n                    break;\n\n                case FabricConnectionState.Disconnected:\n                    // .. do something, now we're offline.\n                    break;\n\n                case FabricConnectionState.Failed:\n                    // .. do something important, we can't connect!\n                    break;\n                &#125;\n            &#125;\n     );\n</code></pre>\n<hr/>\n<a routerLink=\"/ts/multiple-brokers\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Connecting to multiple brokers</a>\n\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n    selector: 'transport-multiple-brokers',\n    templateUrl: './multiple-brokers.component.html',\n    styleUrls: ['./multiple-brokers.component.scss']\n})\nexport class MultipleBrokersComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('MultipleBrokersComponent')\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>\n    Connecting to multiple brokers\n</h1>\n\n<h3>One UI, multiple brokers</h3>\n<p>\n    Sometimes you want to connect to more than one fabric endpoint in your UI. You can easily achieve that by using\n    the same method as when you would connect to a single fabric instance.\n\n</p>\n<p>\n    As long as brokers follow the STOMP v1.2 specifications and are provided through either Transport or any other means, you can communicate with\n    galactic channels across multiple brokers. See below the detailed step-by-step guide to learn how to leverage this feature\n    and what to look out for.\n</p>\n<hr/>\n<h3>Step 1: Connect to multiple brokers</h3>\n<p>\n    Connecting to multiple Transport instances is no different from connecting to a single instance. You create connection\n    and disconnection handlers per broker and establish connection using <code class=\"clr-code\">fabric.connect()</code>.\n</p>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// first endpoint\nthis.fabric.connect(\n    () => &#123;&#125;,\n    () => &#123;&#125;,\n    'mybroker.mycompany.com'\n);\n\n// second endpoint\nthis.fabric.connect(\n    () => &#123;&#125;,\n    () => &#123;&#125;,\n    'somehost',\n    12345,\n    '/custom-fabric-endpoint'\n);\n</code></pre>\n<p>\n    Next, you may want to set up listeners for connection events for the brokers using <code class=\"clr-code\">fabric.whenConnectionStateChanges()</code>.\n</p>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>this.bus.fabric.whenConnectionStateChanges(\n    BusUtil.getFabricConnectionString('mybroker.mycompany.com', 80, '/fabric'))\n        .subscribe((state: FabricConnectionState) => &#123; ... &#125; );\n</code></pre>\n<hr/>\n<h3>Step 2: Mark galactic channels across multiple fabric endpoints</h3>\n<p>\n    Just like you would in the previous chapter, <a routerLink=\"./ts/connecting-broker\">\n    Connecting to the Fabric</a>, you use the same <code class=\"clr-code\">bus.markChannelAsGalactic()</code> for marking a channel\n    galactic and <code class=\"clr-code\">bus.markChannelAsLocal()</code> for converting it back to a local channel. A major difference\n    to keep in mind though is that when you have more than one broker session connected, you will need to\n    specify the target broker endpoint, as a second parameter, that you wish to associate the channel with:\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// mark channel-A as galactic on the first broker\nthis.bus.markChannelAsGalactic('channel-A',\n    BusUtil.getFabricConnectionString('mybroker.mycompany.com', 80, '/fabric'));\n\n// mark channel-B as galactic on the second broker\nthis.bus.markChannelAsGalactic('channel-B',\n    BusUtil.getFabricConnectionString('somehost', 12345, '/custom-fabric-endpoint'));\n</code></pre>\n<p>\n    If you don't specify the second parameter, Transport will not be able to tell which channel should be mapped to which broker\n    and eventually throws an error in the console asking you to explicitly provide it. <strong>If there is only one\n    broker to connect to, however, you don't need to provide the second parameter</strong>, as Transport will\n    automatically fill it out for you.\n</p>\n<p>\n    And that is how to talk to galactic channels mapped across different brokers!\n</p>\n\n<hr/>\n<h3>Extra: Multiple galactic channels across distributed brokers with the same channel name</h3>\n<p>\n    In the example above, we mapped two channels of differing names to their respective broker. It naturally makes sense\n    that you will invoke different channels for different operations. However, you can assign the same channel name to the both mappings\n    if you meet the following conditions:\n</p>\n<br/>\n<ol>\n    <li>\n        All of your distributed brokers communicate over WebSocket with STOMP\n    </li>\n    <li>\n        The channel deals with the same type of request and response data no matter what broker instance\n    </li>\n</ol>\n<hr/>\n<a routerLink=\"/ts/extending-channels\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: extending channels</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n    selector: 'transport-broker-overview',\n    templateUrl: './broker-overview.component.html',\n    styleUrls: ['./broker-overview.component.scss']\n})\nexport class BrokerOverviewComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('BrokerOverviewComponent')\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n\n\n","<h1>Extending Transport to a Message Broker.</h1>\n<p>\n    Transport provides a decoupling mechanism between consumers and producers, via a universal API that makes pub-sub simple across any set of distributed applications. This also allows us to locate producers\n    and consumers where-ever we want across applications.\n</p>\n<p>\n    When you extend to a broker, you will be extending your local event bus, to a distributed event bus via a message/event broker. This distributed event bus can have sources, relays, producers, consumers and integrations.\n    We call this concept a '<strong>fabric</strong>'.\n</p>\n<p>\n    As a developer, you would simply mark which channels you'd like to make 'Galactic' and they would be automatically bridged from your local application bus to the broker. A 'Galactic' Channel is a channel on the bus\n    that has been extended to a broker destination (like a topic or a queue).\n</p>\n<p>\n    The bus is designed to be extended, to child applications running in iframes, web components, shadow DOM - and to backend systems. This is key to making the distributed pattern work. The concept being that\n    services can run in any platform, running any technology - but can communicate with one another. The literal transport mechanism between apps becomes irrelevant, every actor in the system becomes either a producer\n    or a consumer, as peers.\n</p>\n\n<hr/>\n<h3>How the browser connects to the 'fabric'.</h3>\n<p>\n    The browser connects to brokers via a WebSocket. The wire protocol used on the WebSocket is <a href=\"http://stomp.github.io/\" target=\"_blank\">STOMP</a>. STOMP stands for\n    <span class=\"emphasis\">Simple Text Oriented Messaging Protocol.</span>\n</p>\n\n<hr/>\n<h4>Why STOMP?</h4>\n<ol class=\"list\">\n    <li>\n        It's a standard Pub-Sub protocol that is <a href=\"http://stomp.github.io/implementations.html\" target=\"_blank\">widely accepted</a>. It means the fabric is compatible with any STOMP broker.\n    </li>\n    <li>\n        You cannot talk AMQP over a WebSocket, Which means without STOMP, we can't talk directly to ANY broker.\n    </li>\n</ol>\n<hr/>\n\n<h3>\n    What happens when I connect to a broker\n</h3>\n\n<p>\n    Any channel that your application has been designated as 'galactic' will be automatically extended to the broker. It does this by mapping the channel name on your local bus, to a topic on the broker. If you open your developer\n    tools, look\n</p>\n<p>\n    If you don't know what a topic is, or you would like to know more about this stuff, <a href=\"https://www.oreilly.com/library/view/understanding-message-brokers/9781492049296/\" target=\"_blank\">here is a great introduction.</a>\n</p>\n<hr/>\n\n<h3>Galactic Channels</h3>\n\n<p>\n    Galactic Channels are the same as regular channels, except they are distributed to the fabric. The idea here is that we don't want every channel on the bus distributed. When you create a galactic channel, you are\n    bridging that specific channel from the browser, to the fabric. In pub-sub. this is the concept of subscribing to a destination topic or queue.\n</p>\n<p>\n    You can create Galactic Channels at any time, once the Broker Connector is connected to a broker, those Galactic channels will be distributed.\n</p>\n\n<hr/>\n<h4>How do I create a galactic channel?</h4>\n\n<p>\n    If you want to extend a local channel to the fabric, you can use the <code class=\"clr-code\">markChannelAsGalactic()</code> method.\n</p>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>this.bus.markChannelAsGalactic('simple-stream');</code></pre>\n<p>\n    This will result in a subscription to a topic with the same name as your channel. You won't have to worry about any of that however.\n</p>\n<hr/>\n\n<h4>How do I stop extending a channel to the broker?</h4>\n\n<p>\n    If you want to stop extending a channel to the broker (no longer galactic) then you can use the <code class=\"clr-code\">markChannelAsLocal()</code> method.\n</p>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>this.bus.markChannelAsLocal('simple-stream');</code></pre>\n\n\n<p>\n    This will result in an unsubscription from the topic with the same name as your channel. You won't have to worry about any of that however.\n</p>\n<hr/>\n<a routerLink=\"/ts/connecting-broker\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Connecting to a Broker</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n  selector: 'transport-transactions',\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.scss']\n})\nexport class TransactionsComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('TransactionsComponent')\n    }\n    public highlighted = false;\n\n    ngOnInit() {}\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n\n","<h1>Using Transactions with Transport</h1>\n<p>\n    Another technique that can be used to encapsulate a conversation between a component and a service, or between\n    services themselves - is to use a transaction.\n</p>\n<p>\n    Transactions via transport are not traditional transactions, in the sense that they can be rolled back if they fail, instead they are defined as a\n    group of requests and responses that have to occur before the transaction can be considered complete.\n</p>\n<p>\n    For example, if you need to call a number of services to get a number of responses, in order to be able to construct\n    a response for a component - this would be a transactions.\n\n</p>\n<p>\n    Similarly if you need to make a number of calls to services and wait for stores to be available and populated, this would also be a\n    transaction. Transactions can be either synchronous, or asynchronous.\n</p>\n<p>\n    Transactions are asynchronous by default. Essentially when you commit transactions, all the requests will be fired\n    at once, the transaction will complete once responses to all those requests have been\n    completed. These responses can arrive in any order and at any time (hence the asynchronous nature).\n</p>\n<p>\n    However there may be times when you want your logic to run in a synchronous manner\n    (due to your API design for example). When running a synchronous transaction, each request in the transaction will\n    only fire once the previous one has completed. This is obviously a lot slower,\n    but may be required based on your needs.\n</p>\n\n<p>\n    Below is an example of another component that calls <code class=\"clr-code\">PongService</code> three times, via a\n    transaction\n</p>\n\n<h3>Angular PingTransactionComponent</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; AbstractBase &#125; from '@vmw/transport/core';\nimport &#123; Component &#125; from '@angular/core';\nimport &#123;\n    PongRequestType,\n    PongServiceChannel,\n    PongServiceRequest,\n    PongServiceResponse\n&#125; from './pong.service.model';\nimport &#123; BusTransaction, TransactionType, APIRequest &#125; from '@vmw/transport';\nimport &#123; GeneralUtil &#125; from '@vmw/transport/util/util';\nimport &#123; GeneralError &#125; from '@vmw/transport/core/model/error.model';\n\n@Component(&#123;\n    selector: 'ping-transaction-component',\n    template: `\n        &lt;button (click)=\"sendPingTransaction()\"&gt;Ping (Transaction)&lt;/button&gt;&lt;br/&gt;\n        &lt;ul&gt;\n            &lt;li *ngFor=\"let response of responses\"&gt;&#123;&#123;response.value&#125;&#125;&lt;/li&gt;\n        &lt;/ul&gt;`\n&#125;)\nexport class PingTransactionComponent extends AbstractBase &#123;\n\n    public responses: PongServiceResponse[] = [&#123;value: 'nothing yet, request something!'&#125;];\n\n    constructor() &#123;\n        super('PingTransactionComponent');\n    &#125;\n\n    /**\n     * Send a three PongService requests as a part of a transaction.\n     */\n    public sendPingTransaction(): void &#123;\n\n        const createRequest = (type: PongRequestType, payload: string) => &#123;\n            return this.fabric.generateFabricRequest(type, payload);\n        &#125;;\n\n        // send the same request, three times.\n        this.pingTransaction([\n            createRequest(PongRequestType.Full, 'request 1'),\n            createRequest(PongRequestType.Full, 'request 2'),\n            createRequest(PongRequestType.Full, 'request 3')\n        ]);\n    &#125;\n\n    private pingTransaction(requests: APIRequest[]): void &#123;\n\n        // create a transaction\n        const transaction: BusTransaction =\n            this.bus.createTransaction(TransactionType.ASYNC, GeneralUtil.genUUIDShort());\n\n        // for each request submitted, queue up a request in transaction\n        for (let request of requests) &#123;\n\n            // add request to transaction\n            transaction.sendRequest(PongServiceChannel, request);\n        &#125;\n\n        // register a transaction completion handler\n        transaction.onComplete&lt;PongServiceResponse&gt;(\n            (pongResponses: PongServiceResponse[]) =&gt; &#123;\n\n                this.responses = [];\n\n                // push responses\n                pongResponses.forEach(\n                    (response: PongServiceResponse) =&gt; &#123;\n                        this.responses.push(response);\n                    &#125;\n                );\n            &#125;\n        );\n\n        // register a transaction error handler\n        transaction.onError&lt;GeneralError&gt;(\n            (error: GeneralError) =&gt; &#123;\n                // do something with this error\n            &#125;\n        );\n\n        // run the transaction!\n        transaction.commit();\n    &#125;\n&#125;</code></pre>\n\n<p>Try it below, you can see three requests come back all made at different times, indicated by the detailed timing.</p>\n\n<p>\n    If you have logging enabled (debug or verbose), you should see something like the following output in your developer console.<br/>\n</p>\n\n<pre class=\"log-output\">▫️️ <span class=\"console-purple\">[Inf]:</span> 🏦 <span class=\"console-pink\">Transaction Created</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> ⏳ <span class=\"console-pink\">Transaction: Bus Request Queued: [15870062]</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> ⏳ <span class=\"console-pink\">Transaction: Bus Request Queued: [bcc554b4]</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> ⏳ <span class=\"console-pink\">Transaction: Bus Request Queued: [602430e9]</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> 👋 <span class=\"console-pink\">Transaction: Completed Handler Registered</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n▫️️ <span class=\"console-purple\">[Inf]:</span> 🏦 <span class=\"console-pink\">Transaction: Starting Asynchronous</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n<span class=\"badge badge-purple\">3</span>🔸 <span class=\"console-purple\">[Deb]:</span> ➡️ <span class=\"console-pink\">Transaction: Sending Async Request to channel: services-PongService</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> ⬅️ <span class=\"console-pink\">Transaction: Received Async Response on channel: services-PongService</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> <span class=\"console-pink\">* Dropping Message 16b12963, handler only online for ae71734e</span> <span class=\"console-who\">[f18faebe]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> <span class=\"console-pink\">* Dropping Message 16b12963, handler only online for ae90e95e</span> <span class=\"console-who\">[f18faebe]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> ⬅️ <span class=\"console-pink\">Transaction: Received Async Response on channel: services-PongService</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> <span class=\"console-pink\">* Dropping Message ae71734e, handler only online for ae90e95e</span> <span class=\"console-who\">[f18faebe]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n🔸 <span class=\"console-purple\">[Deb]:</span> ⬅️ <span class=\"console-pink\">Transaction: Received Async Response on channel: services-PongService</span> <span class=\"console-who\">[f18faebe.3a00b4ff]</span> <span class=\"console-time\">(8:36:04 AM)</span>\n▫️️ <span class=\"console-purple\">[Inf]:</span> 🎉 <span class=\"console-pink\">Transaction Completed</span> <span class=\"console-who\">[f18faebe.3a00b4ff] (8:36:04 AM)</span></pre>\n\n\n<p>\n    All of the underlying handling of requests, responses and mappings are encapsulated by the transaction. Each request\n    has it's own ID and is individually tracked by the\n    transaction, this allows any number of transactions to be operating simultaneously at any one time on a channel.\n</p>\n<hr/>\n<a routerLink=\"/ts/logging\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Logging</a>\n\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {AfterViewChecked, Component, OnInit} from '@angular/core';\nimport {AbstractBase} from \"@vmw/transport/core\";\nimport {HighlightService} from \"@vmw/transport-docs/services/highlight.service\";\n\n@Component({\n    selector: 'transport-store-advanced',\n    templateUrl: './store-advanced.component.html',\n    styleUrls: ['./store-advanced.component.scss']\n})\nexport class StoreAdvancedComponent extends AbstractBase implements OnInit, AfterViewChecked {\n    constructor(private highlightService: HighlightService) {\n        super('TransactionsComponent')\n    }\n\n    public highlighted = false;\n\n    ngOnInit() {\n    }\n\n    ngAfterViewChecked() {\n        if (!this.highlighted) {\n            this.highlightService.highlightAll();\n            this.highlighted = true;\n        }\n    }\n}\n","<h1>Stores and Advanced use</h1>\n\n<p>\n    It's not really advanced, but you know, a little more functionality that just a map of maps. Stores can be\n    subscribed to for state changes and initializations, as well as delegate\n    mutation requests to business logic that handles API calls to mutate those models.\n</p>\n<p>\n    Let's first start with understanding how I can be notified when state in a store has changed.\n</p>\n<hr/>\n<h2>\n    Listening for state changes in a store.\n</h2>\n\n<p>\n    You can listen for any kind of state change on your store (state changes are defined by you), you can also listen\n    for multiple state changes, not just a single one. You can decide to listen for an update to a single object, or all\n    objects in the store.\n</p>\n<p>\n    Two methods provide access to streams that can be subscribed to. The first one will tick any time any object is\n    affected by any state change (you care about) in a store, this is\n    <code class=\"clr-code\">onAllChanges&lt;S&gt;(...stateChangeType: S[]): StoreStream&lt;T&gt;</code>\n</p>\n\n<p>\n    The second one tick any time a specific object is affected by any state change (you care about) in a store, this is\n    <code class=\"clr-code\">onChange&lt;S&gt;(id: UUID, ...stateChangeType: S[]): StoreStream&lt;T&gt;</code>\n</p>\n\n\n<h3>Listening for State Changes on 'MyObject' Store</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Listen for 'Added' state changes in 'myStore'\nmyStore.onAllChanges(MyObjectState.Added)\n    .subscribe(\n        (updatedObject: MyObject) => &#123;\n            // do something interesting with this newly added thing.\n        &#125;\n    );\n\n// Listen for 'Sleeping' and 'Changed' state changes in 'myStore'\nmyStore.onAllChanges(MyObjectState.Sleeping, MyObjectState.Changed)\n    .subscribe(\n        (updatedObject: MyObject) => &#123;\n            // do something interesting with this changed or sleeping thing.\n        &#125;\n    );</code></pre>\n\n<p>\n    You should notice that the return type of these methods is <code class=\"clr-code\">StoreStream&lt;T&gt;</code>. This\n    interface provides you two simple methods: <code class=\"clr-code\">subscribe(successHandler: MessageFunction&lt;T&gt;):\n    Subscription</code> and<code class=\"clr-code\">unsubscribe(): void</code>.\n</p>\n<p>\n    Just like RxJS, this allows you subscribe to updates from the\n    store for which ever object(s) you're interested in. You can also unsubscribe from the stream as well, when you no\n    longer care about subscriptions. The return type of the <code class=\"clr-code\">subscribe()</code> method is an RxJS\n    <code class=\"clr-code\">Subscription</code>\n    object, which you can use at your leisure if you want.\n</p>\n\n<hr/>\n\n<h2>Waiting for a store to be available - <span class=\"emphasis\">dealing with race conditions</span></h2>\n\n<p>\n    There are times when you need to ensure that components don't start pulling state from a store, before that store is\n    ready. Normally you would define a process to bootstrap a store, populate it with data and then inform every\n    consumer of that store, that the store is ready. There are a few ways to 'wait for a store to be ready'.\n</p>\n\n<h3>Using <code class=\"clr-code\">whenReady()</code></h3>\n\n<p>\n    The first approach is to use the <code class=\"clr-code\">myStore.whenReady(readyFunction: MessageFunction&lt;Map&lt;UUID,\n    T&gt;&gt;)</code> method. This allows you to pass a lambda in that will be passed the contents of the store when\n    it's been\n    'initialized'. This will execute asynchronously. This is the simplest way to wait for a store's state to be set up\n    before consuming it.\n</p>\n\n<h3>Using whenReady() on 'myStore'</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>import &#123; UUID &#125; from '@vmw/transport';\n\n// Wait for store to be ready using whenReady();\nlet myData: Array&lt;MyObject&gt; = [];\n\nmyStore.whenReady(\n    (storeContents: Map&lt;UUID, MyObject&gt;) =>  &#123;\n\n            // set myData.\n            myData = storeContents.values();\n        &#125;\n    );\n\n...\n// ... somewhere else, initialize the store when it's loaded up.\nmyStore.initialize();</code></pre>\n\n\n<div class=\"alert alert-info\" role=\"alert\">\n    <div class=\"alert-items\">\n        <div class=\"alert-item static\">\n            <div class=\"alert-icon-wrapper\">\n                <clr-icon class=\"alert-icon\" shape=\"info-circle\"></clr-icon>\n            </div>\n            <span class=\"alert-text\">\n\n                You can also use <code class=\"clr-code\">myStore.populate()</code> to initialize the store. When you use <code\n                class=\"clr-code\">populate()</code>,\n         the store is not only populated with bootstrapped state - it also initializes. Both will be broadcast to any consumer using <code\n                class=\"clr-code\">whenReady()</code>.\n\n            </span>\n        </div>\n    </div>\n</div>\n\n<hr/>\n\n<h3>Using <code class=\"clr-code\">readyJoin()</code> <span class=\"emphasis\"> for multiple stores</span></h3>\n<p>\n    The second approach is for when you need to wait for <strong>multiple stores</strong> to be ready. This method is\n    available via <code class=\"clr-code\">this.storeManager</code>. It's not attached to a particular store, as this\n    functionality is designed to wait for multiple stores to be available. <code class=\"clr-code\">this.storeManager.readyJoin(stores:\n    Array&lt;StoreType&gt;): StoreReadyResult</code> returns an object of type <code class=\"clr-code\">StoreReadyResult</code>.\n</p>\n<p>\n    This interface provides the same method name as the store based approach as <code class=\"clr-code\">whenReady()</code>.\n    Except this doesn't deliver the contents of a store to the handling function, as all stores are being waited on and\n    the amount of data coming in could be significant.\n</p>\n\n<h3>Using readyJoin() for multiple stores.</h3>\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Create stores\nthis.storeManager.createStore('store1');\nthis.storeManager.createStore('store2');\nthis.storeManager.createStore('store3');\n\n// wait for all stores to be ready\nthis.storeManager.readyJoin(['store1', 'store2', 'store3'])\n        .whenReady(\n            () => &#123;\n                // stores are ready... do something fun.\n            &#125;\n        );\n\n// ... somewhere else, initialize stores.\nstore1.initialize();\nstore2.initialize();\nstore3.initialize();</code></pre>\n\n<hr/>\n\n\n<h3>Using Transactions <span class=\"emphasis\"> - preferred approach for multiple stores</span>&nbsp;✨</h3>\n\n<p>\n    Transactions are the cleanest way to wait for multiple stores to be ready. You can combine requests/responses and\n    waiting for stores to be ready into a single transaction.\n</p>\n\n<pre class=\"code\"><code class=\"language-typescript\" ngNonBindable>// Create stores\nthis.storeManager.createStore&lt;string&gt;('store1');\nthis.storeManager.createStore&lt;string&gt;('store2');\nthis.storeManager.createStore&lt;string&gt;('store3');\n\n// create transaction.\nconst transaction: Transaction = this.bus.createTransaction();\n\n// register transaction complete handler.\ntransaction.onComplete(\n            (results: string[]) => &#123;\n                    // do something with fun with your results.\n\n            &#125;\n        );\n\n// register stores with transaction.\ntransaction.waitForStoreReady('store1');\ntransaction.waitForStoreReady('store2');\ntransaction.waitForStoreReady('store3');\n\n// commit transaction.\ntransaction.commit();\n\n// ... somewhere else, initialize stores.\nstore1.initialize();\nstore2.initialize();\nstore3.initialize();</code></pre>\n\n<hr/>\n<a routerLink=\"/ts/iframes\" class=\"btn btn-primary btn-block btn-outline\">Next Steps: Messaging Across iFrames</a>\n\n\n\n\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'transport-simple-stream',\n    templateUrl: './simple-stream.component.html',\n    styleUrls: ['./simple-stream.component.scss']\n})\nexport class SimpleStreamComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","<h1>Transport for TypeScript Example: Simple Stream</h1>\n\n<p>\n    In this example, we have used <a href=\"https://clarity.design/\">Clarity Core</a>, combined with <a href=\"https://reactjs.org/\">React</a>.\n    We have created a simple <code class=\"clr-code\">SimpleStream.tsx</code> Component that renders out a button that starts or stops the stream.\n</p>\n\n<p>\n    When you submit the form, the component uses Transport to stream from our live demo broker that uses <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a>.\n</p>\n\n<p>\n    <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a> is running a simple <a href=\"https://github.com/vmware/transport-go/blob/main/plank/services/simple-stream-service.go\">simple stream service</a> on <code class=\"clr-code\">simple-stream-service</code>\n    channel. It will emit a random word on the stream, every 1 second.\n</p>\n\n<br/>\n\n<iframe src=\"https://codesandbox.io/embed/transport-example-simple-stream-cfzq8?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2FSimpleStream.tsx&theme=dark\"\n        style=\"width:100%; height:90%; border:0; border-radius: 4px; overflow:hidden;\"\n        title=\"Transport Example: Simple Stream\"\n        allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n        sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n    selector: 'transport-joke',\n    templateUrl: './joke.component.html',\n    styleUrls: ['./joke.component.scss']\n})\nexport class JokeComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n}\n","<h1>Transport for TypeScript Example: Joke Service</h1>\n\n<p>\n    In this example, we have used <a href=\"https://clarity.design/\">Clarity Core</a>, combined with <a href=\"https://reactjs.org/\">React</a>.\n    We have created a simple <code class=\"clr-code\">Joke.tsx</code> Component that renders out a button for you to press, to get a joke.\n</p>\n\n<p>\n    When you press the button the component uses Transport to call our live demo broker that uses <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a>.\n</p>\n\n<p>\n    <a href=\"https://github.com/vmware/transport-go/tree/main/plank\">plank</a> is running a simple <a href=\"https://github.com/vmware/transport-go/blob/main/plank/services/joke-service.go\">joke service</a> on <code class=\"clr-code\">joke-service</code>\n    channel.\n</p>\n\n<br/>\n\n<iframe src=\"https://codesandbox.io/embed/transport-example-joke-service-yt9k4?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2FJokeComponent.tsx&theme=dark\"\n        style=\"width:100%; height:90%; border:0; border-radius: 4px; overflow:hidden;\"\n        title=\"Transport Example: Joke Service\"\n        allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n        sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n","/*\n * Copyright 2021 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\n\nimport {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\n\n@Component({\n    selector: 'transport-typescript',\n    templateUrl: './typescript.component.html',\n    styleUrls: ['./typescript.component.scss']\n})\nexport class TypescriptComponent implements OnInit {\n\n    @ViewChild(\"mainContent\")\n    private mainContentDiv!: ElementRef<HTMLElement>;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onActivate(_event: any): void {\n        // Scrolling back to the top\n        // Reference: https://stackoverflow.com/questions/48048299/angular-5-scroll-to-top-on-every-route-click/48048822\n        if (this.mainContentDiv) {\n            (this.mainContentDiv.nativeElement as HTMLElement).scrollTop = 0;\n        }\n    }\n}\n","<clr-main-container>\n    <transport-header></transport-header>\n    <div class=\"content-container\">\n        <clr-vertical-nav [clrVerticalNavCollapsible]=\"false\" [clr-nav-level]=\"2\">\n            <a clrVerticalNavLink routerLink=\"./overview\" routerLinkActive=\"active\">\n                TypeScript Overview\n            </a>\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Getting Started\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./importing\" routerLinkActive=\"active\">\n                        Importing Transport (ES6)\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./importing-umd\" routerLinkActive=\"active\">\n                        Importing Transport (UMD)\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./importing-angular\" routerLinkActive=\"active\">\n                        Importing into Angular\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./importing-react\" routerLinkActive=\"active\">\n                        Importing into React\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./initializing\" routerLinkActive=\"active\">\n                        Initializing Transport\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./hello-world\" routerLinkActive=\"active\">\n                        Hello World!\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Extending To Brokers\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./broker-overview\" routerLinkActive=\"active\">\n                        Overview\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./connecting-broker\" routerLinkActive=\"active\">\n                        Connecting to a Broker\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./multiple-brokers\" routerLinkActive=\"active\">\n                        Connecting Multiple Brokers\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./extending-channels\" routerLinkActive=\"active\">\n                        Extending Channels\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Operations\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./building-services\" routerLinkActive=\"active\">\n                       Building Services\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./calling-services\" routerLinkActive=\"active\">\n                        Calling Services\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./advanced-messaging\" routerLinkActive=\"active\">\n                        Advanced Messaging\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./transactions\" routerLinkActive=\"active\">\n                        Transactions\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./logging\" routerLinkActive=\"active\">\n                        Logging\n                    </a>\n\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Using Stores\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./store-basics\" routerLinkActive=\"active\">\n                        Stores: Basics\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./store-advanced\" routerLinkActive=\"active\">\n                        Stores: Advanced\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Utilities\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./iframes\" routerLinkActive=\"active\">\n                        Messaging Across iFrames\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./abstractions\" routerLinkActive=\"active\">\n                        Built in Abstractions\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n            <clr-vertical-nav-group routerLinkActive=\"active\">\n                Live Examples\n                <clr-vertical-nav-group-children *clrIfExpanded=\"true\">\n                    <a clrVerticalNavLink routerLink=\"./examples/ping-pong\" routerLinkActive=\"active\">\n                        Ping Pong\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./examples/joke-service\" routerLinkActive=\"active\">\n                        Joke Service\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./examples/stock-ticker\" routerLinkActive=\"active\">\n                        Stock Ticker\n                    </a>\n                    <a clrVerticalNavLink routerLink=\"./examples/simple-stream\" routerLinkActive=\"active\">\n                        Simple Stream\n                    </a>\n                </clr-vertical-nav-group-children>\n            </clr-vertical-nav-group>\n\n        </clr-vertical-nav>\n        <div class=\"content-area\" id=\"main-content\" #mainContent>\n            <router-outlet (activate)=\"onActivate($event)\"></router-outlet>\n        </div>\n    </div>\n    <transport-footer></transport-footer>\n</clr-main-container>\n"],"sourceRoot":"webpack:///"}